
Final_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080066b8  080066b8  000166b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006808  08006808  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006808  08006808  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006808  08006808  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08006880  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08006880  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc36  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a5  00000000  00000000  0002fccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00032078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00032e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001849d  00000000  00000000  00033bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ee5  00000000  00000000  0004c06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090972  00000000  00000000  0005cf52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed8c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dcc  00000000  00000000  000ed914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800669c 	.word	0x0800669c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800669c 	.word	0x0800669c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <DC_MOTOR_Init>:
#include "DC_MOTOR.h"
#include "DC_MOTOR_cfg.h"
#include "main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0ae      	sub	sp, #184	; 0xb8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint32_t ARR_Value = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint8_t i = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a76      	ldr	r2, [pc, #472]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000ad2:	015b      	lsls	r3, r3, #5
 8000ad4:	4413      	add	r3, r2
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a75      	ldr	r2, [pc, #468]	; (8000cb0 <DC_MOTOR_Init+0x238>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d008      	beq.n	8000af0 <DC_MOTOR_Init+0x78>
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a72      	ldr	r2, [pc, #456]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000ae2:	015b      	lsls	r3, r3, #5
 8000ae4:	4413      	add	r3, r2
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a71      	ldr	r2, [pc, #452]	; (8000cb0 <DC_MOTOR_Init+0x238>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d10c      	bne.n	8000b0a <DC_MOTOR_Init+0x92>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b70      	ldr	r3, [pc, #448]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a6f      	ldr	r2, [pc, #444]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b6d      	ldr	r3, [pc, #436]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	e076      	b.n	8000bf8 <DC_MOTOR_Init+0x180>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a67      	ldr	r2, [pc, #412]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000b0e:	015b      	lsls	r3, r3, #5
 8000b10:	4413      	add	r3, r2
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a68      	ldr	r2, [pc, #416]	; (8000cb8 <DC_MOTOR_Init+0x240>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d008      	beq.n	8000b2c <DC_MOTOR_Init+0xb4>
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4a63      	ldr	r2, [pc, #396]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000b1e:	015b      	lsls	r3, r3, #5
 8000b20:	4413      	add	r3, r2
 8000b22:	3304      	adds	r3, #4
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a64      	ldr	r2, [pc, #400]	; (8000cb8 <DC_MOTOR_Init+0x240>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d10c      	bne.n	8000b46 <DC_MOTOR_Init+0xce>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	4b61      	ldr	r3, [pc, #388]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a60      	ldr	r2, [pc, #384]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b5e      	ldr	r3, [pc, #376]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	e058      	b.n	8000bf8 <DC_MOTOR_Init+0x180>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4a58      	ldr	r2, [pc, #352]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000b4a:	015b      	lsls	r3, r3, #5
 8000b4c:	4413      	add	r3, r2
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a5a      	ldr	r2, [pc, #360]	; (8000cbc <DC_MOTOR_Init+0x244>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d008      	beq.n	8000b68 <DC_MOTOR_Init+0xf0>
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a54      	ldr	r2, [pc, #336]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000b5a:	015b      	lsls	r3, r3, #5
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3304      	adds	r3, #4
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a56      	ldr	r2, [pc, #344]	; (8000cbc <DC_MOTOR_Init+0x244>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d10c      	bne.n	8000b82 <DC_MOTOR_Init+0x10a>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	4b52      	ldr	r3, [pc, #328]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a51      	ldr	r2, [pc, #324]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	e03a      	b.n	8000bf8 <DC_MOTOR_Init+0x180>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4a49      	ldr	r2, [pc, #292]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000b86:	015b      	lsls	r3, r3, #5
 8000b88:	4413      	add	r3, r2
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a4c      	ldr	r2, [pc, #304]	; (8000cc0 <DC_MOTOR_Init+0x248>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d008      	beq.n	8000ba4 <DC_MOTOR_Init+0x12c>
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4a45      	ldr	r2, [pc, #276]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000b96:	015b      	lsls	r3, r3, #5
 8000b98:	4413      	add	r3, r2
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a48      	ldr	r2, [pc, #288]	; (8000cc0 <DC_MOTOR_Init+0x248>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d10c      	bne.n	8000bbe <DC_MOTOR_Init+0x146>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba4:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a42      	ldr	r2, [pc, #264]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0320 	and.w	r3, r3, #32
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	e01c      	b.n	8000bf8 <DC_MOTOR_Init+0x180>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4a3a      	ldr	r2, [pc, #232]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000bc2:	015b      	lsls	r3, r3, #5
 8000bc4:	4413      	add	r3, r2
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a3e      	ldr	r2, [pc, #248]	; (8000cc4 <DC_MOTOR_Init+0x24c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d008      	beq.n	8000be0 <DC_MOTOR_Init+0x168>
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4a36      	ldr	r2, [pc, #216]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000bd2:	015b      	lsls	r3, r3, #5
 8000bd4:	4413      	add	r3, r2
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a3a      	ldr	r2, [pc, #232]	; (8000cc4 <DC_MOTOR_Init+0x24c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d10b      	bne.n	8000bf8 <DC_MOTOR_Init+0x180>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <DC_MOTOR_Init+0x23c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    }
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4a2c      	ldr	r2, [pc, #176]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000bfc:	015b      	lsls	r3, r3, #5
 8000bfe:	4413      	add	r3, r2
 8000c00:	3308      	adds	r3, #8
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	4a25      	ldr	r2, [pc, #148]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000c18:	015b      	lsls	r3, r3, #5
 8000c1a:	4413      	add	r3, r2
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fd0f 	bl	8003648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000c2e:	015b      	lsls	r3, r3, #5
 8000c30:	4413      	add	r3, r2
 8000c32:	330a      	adds	r3, #10
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000c4a:	015b      	lsls	r3, r3, #5
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3304      	adds	r3, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fcf5 	bl	8003648 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000c62:	015b      	lsls	r3, r3, #5
 8000c64:	4413      	add	r3, r2
 8000c66:	6818      	ldr	r0, [r3, #0]
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000c6c:	015b      	lsls	r3, r3, #5
 8000c6e:	4413      	add	r3, r2
 8000c70:	3308      	adds	r3, #8
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	f002 fe81 	bl	800397e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000c80:	015b      	lsls	r3, r3, #5
 8000c82:	4413      	add	r3, r2
 8000c84:	3304      	adds	r3, #4
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <DC_MOTOR_Init+0x234>)
 8000c8c:	015b      	lsls	r3, r3, #5
 8000c8e:	4413      	add	r3, r2
 8000c90:	330a      	adds	r3, #10
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	2200      	movs	r2, #0
 8000c96:	4619      	mov	r1, r3
 8000c98:	f002 fe71 	bl	800397e <HAL_GPIO_WritePin>

	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8000ca8:	e018      	b.n	8000cdc <DC_MOTOR_Init+0x264>
 8000caa:	bf00      	nop
 8000cac:	08006718 	.word	0x08006718
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010c00 	.word	0x40010c00
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	40011400 	.word	0x40011400
 8000cc4:	40011800 	.word	0x40011800
	{
		ARR_Value *= 2;
 8000cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8000cd2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4a46      	ldr	r2, [pc, #280]	; (8000df8 <DC_MOTOR_Init+0x380>)
 8000ce0:	015b      	lsls	r3, r3, #5
 8000ce2:	4413      	add	r3, r2
 8000ce4:	331c      	adds	r3, #28
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d3eb      	bcc.n	8000cc8 <DC_MOTOR_Init+0x250>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4a41      	ldr	r2, [pc, #260]	; (8000df8 <DC_MOTOR_Init+0x380>)
 8000cf4:	015b      	lsls	r3, r3, #5
 8000cf6:	4413      	add	r3, r2
 8000cf8:	3314      	adds	r3, #20
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <DC_MOTOR_Init+0x384>)
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <DC_MOTOR_Init+0x380>)
 8000d0a:	015b      	lsls	r3, r3, #5
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3318      	adds	r3, #24
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000d16:	fb02 f303 	mul.w	r3, r2, r3
 8000d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	PSC_Value--;
 8000d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	ARR_Value -= 2;
 8000d2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d30:	3b02      	subs	r3, #2
 8000d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <DC_MOTOR_Init+0x380>)
 8000d3a:	015b      	lsls	r3, r3, #5
 8000d3c:	4413      	add	r3, r2
 8000d3e:	330c      	adds	r3, #12
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	623b      	str	r3, [r7, #32]
	htim.Init.Prescaler = PSC_Value;
 8000d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Period = ARR_Value;
 8000d4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_TIM_Base_Init(&htim);
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fb03 	bl	800436c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000d6e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fe3d 	bl	80049f8 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fb4a 	bl	800441c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000d94:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 f996 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	673b      	str	r3, [r7, #112]	; 0x70
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <DC_MOTOR_Init+0x380>)
 8000db8:	015b      	lsls	r3, r3, #5
 8000dba:	4413      	add	r3, r2
 8000dbc:	3310      	adds	r3, #16
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000dc4:	f107 0320 	add.w	r3, r7, #32
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 fd53 	bl	8004874 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8000dce:	f107 0320 	add.w	r3, r7, #32
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fe64 	bl	8002aa0 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <DC_MOTOR_Init+0x380>)
 8000ddc:	015b      	lsls	r3, r3, #5
 8000dde:	4413      	add	r3, r2
 8000de0:	3310      	adds	r3, #16
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fb66 	bl	80044bc <HAL_TIM_PWM_Start>
}
 8000df0:	bf00      	nop
 8000df2:	37b8      	adds	r7, #184	; 0xb8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	08006718 	.word	0x08006718
 8000dfc:	000f4240 	.word	0x000f4240

08000e00 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint8_t au8_DIR, uint16_t au16_SPEED)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	71bb      	strb	r3, [r7, #6]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	80bb      	strh	r3, [r7, #4]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DIR_CW)
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d11f      	bne.n	8000e58 <DC_MOTOR_Start+0x58>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	4a40      	ldr	r2, [pc, #256]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000e1c:	015b      	lsls	r3, r3, #5
 8000e1e:	4413      	add	r3, r2
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	4a3d      	ldr	r2, [pc, #244]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000e26:	015b      	lsls	r3, r3, #5
 8000e28:	4413      	add	r3, r2
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4619      	mov	r1, r3
 8000e32:	f002 fda4 	bl	800397e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	4a38      	ldr	r2, [pc, #224]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000e3a:	015b      	lsls	r3, r3, #5
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3304      	adds	r3, #4
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4a35      	ldr	r2, [pc, #212]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000e46:	015b      	lsls	r3, r3, #5
 8000e48:	4413      	add	r3, r2
 8000e4a:	330a      	adds	r3, #10
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	f002 fd94 	bl	800397e <HAL_GPIO_WritePin>
 8000e56:	e021      	b.n	8000e9c <DC_MOTOR_Start+0x9c>
	}
	else if(au8_DIR == DIR_CCW)
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d11e      	bne.n	8000e9c <DC_MOTOR_Start+0x9c>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4a2e      	ldr	r2, [pc, #184]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000e62:	015b      	lsls	r3, r3, #5
 8000e64:	4413      	add	r3, r2
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4a2c      	ldr	r2, [pc, #176]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000e6c:	015b      	lsls	r3, r3, #5
 8000e6e:	4413      	add	r3, r2
 8000e70:	3308      	adds	r3, #8
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	f002 fd81 	bl	800397e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000e80:	015b      	lsls	r3, r3, #5
 8000e82:	4413      	add	r3, r2
 8000e84:	3304      	adds	r3, #4
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4a24      	ldr	r2, [pc, #144]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000e8c:	015b      	lsls	r3, r3, #5
 8000e8e:	4413      	add	r3, r2
 8000e90:	330a      	adds	r3, #10
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	2201      	movs	r2, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	f002 fd71 	bl	800397e <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000ea0:	015b      	lsls	r3, r3, #5
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3310      	adds	r3, #16
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d108      	bne.n	8000ebe <DC_MOTOR_Start+0xbe>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000eb0:	015b      	lsls	r3, r3, #5
 8000eb2:	4413      	add	r3, r2
 8000eb4:	330c      	adds	r3, #12
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	88ba      	ldrh	r2, [r7, #4]
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8000ebc:	e029      	b.n	8000f12 <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000ec2:	015b      	lsls	r3, r3, #5
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3310      	adds	r3, #16
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d108      	bne.n	8000ee0 <DC_MOTOR_Start+0xe0>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000ed2:	015b      	lsls	r3, r3, #5
 8000ed4:	4413      	add	r3, r2
 8000ed6:	330c      	adds	r3, #12
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	88ba      	ldrh	r2, [r7, #4]
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ede:	e018      	b.n	8000f12 <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000ee4:	015b      	lsls	r3, r3, #5
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3310      	adds	r3, #16
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d108      	bne.n	8000f02 <DC_MOTOR_Start+0x102>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000ef4:	015b      	lsls	r3, r3, #5
 8000ef6:	4413      	add	r3, r2
 8000ef8:	330c      	adds	r3, #12
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	88ba      	ldrh	r2, [r7, #4]
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f00:	e007      	b.n	8000f12 <DC_MOTOR_Start+0x112>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <DC_MOTOR_Start+0x11c>)
 8000f06:	015b      	lsls	r3, r3, #5
 8000f08:	4413      	add	r3, r2
 8000f0a:	330c      	adds	r3, #12
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	88ba      	ldrh	r2, [r7, #4]
 8000f10:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08006718 	.word	0x08006718

08000f20 <DC_MOTOR_Stop>:
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
	}
}

void DC_MOTOR_Stop(uint8_t au8_MOTOR_Instance)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
	/* Write To The 2 Direction Control Pins */
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000f2e:	015b      	lsls	r3, r3, #5
 8000f30:	4413      	add	r3, r2
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4a2c      	ldr	r2, [pc, #176]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	f002 fd1b 	bl	800397e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000f4c:	015b      	lsls	r3, r3, #5
 8000f4e:	4413      	add	r3, r2
 8000f50:	3304      	adds	r3, #4
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	4413      	add	r3, r2
 8000f5c:	330a      	adds	r3, #10
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	4619      	mov	r1, r3
 8000f64:	f002 fd0b 	bl	800397e <HAL_GPIO_WritePin>

	/* Write ZERO To The PWM Ch DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000f6c:	015b      	lsls	r3, r3, #5
 8000f6e:	4413      	add	r3, r2
 8000f70:	3310      	adds	r3, #16
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d108      	bne.n	8000f8a <DC_MOTOR_Stop+0x6a>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 0;
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4413      	add	r3, r2
 8000f80:	330c      	adds	r3, #12
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2200      	movs	r2, #0
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
	}
}
 8000f88:	e029      	b.n	8000fde <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000f8e:	015b      	lsls	r3, r3, #5
 8000f90:	4413      	add	r3, r2
 8000f92:	3310      	adds	r3, #16
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d108      	bne.n	8000fac <DC_MOTOR_Stop+0x8c>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 0;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000f9e:	015b      	lsls	r3, r3, #5
 8000fa0:	4413      	add	r3, r2
 8000fa2:	330c      	adds	r3, #12
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000faa:	e018      	b.n	8000fde <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000fb0:	015b      	lsls	r3, r3, #5
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3310      	adds	r3, #16
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d108      	bne.n	8000fce <DC_MOTOR_Stop+0xae>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = 0;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000fc0:	015b      	lsls	r3, r3, #5
 8000fc2:	4413      	add	r3, r2
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fcc:	e007      	b.n	8000fde <DC_MOTOR_Stop+0xbe>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <DC_MOTOR_Stop+0xc8>)
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	4413      	add	r3, r2
 8000fd6:	330c      	adds	r3, #12
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08006718 	.word	0x08006718

08000fec <reset_encoder>:
	}
	encoder_value->position += encoder_value->velocity;
	encoder_value->last_counter_value = temp_counter;
}

void reset_encoder(encoder_instance *encoder_value){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	encoder_value->velocity = 0;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	801a      	strh	r2, [r3, #0]
	encoder_value->position = 0;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
	encoder_value->last_counter_value = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <calculate_segment>:

#include "MP.h"
#include <float.h>

void calculate_segment(segment *s)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	if(s->p1->x == s->p2->x)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff fcb6 	bl	8000998 <__aeabi_dcmpeq>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00d      	beq.n	800104e <calculate_segment+0x3e>
	{
		s->m = DBL_MAX;
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <calculate_segment+0xbc>)
 800103a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		s->c = s->p1->x;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	e9c1 2304 	strd	r2, r3, [r1, #16]
	else
	{
		s->m = (s->p2->y-s->p1->y)/(s->p2->x-s->p1->x);
		s->c = s->p2->y - s->m*s->p2->x;
	}
}
 800104c:	e03a      	b.n	80010c4 <calculate_segment+0xb4>
		s->m = (s->p2->y-s->p1->y)/(s->p2->x-s->p1->x);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800105e:	f7ff f87b 	bl	8000158 <__aeabi_dsub>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4614      	mov	r4, r2
 8001068:	461d      	mov	r5, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff f86d 	bl	8000158 <__aeabi_dsub>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4620      	mov	r0, r4
 8001084:	4629      	mov	r1, r5
 8001086:	f7ff fb49 	bl	800071c <__aeabi_ddiv>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	e9c1 2302 	strd	r2, r3, [r1, #8]
		s->c = s->p2->y - s->m*s->p2->x;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff fa0d 	bl	80004c8 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4620      	mov	r0, r4
 80010b4:	4629      	mov	r1, r5
 80010b6:	f7ff f84f 	bl	8000158 <__aeabi_dsub>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	7fefffff 	.word	0x7fefffff

080010d0 <spinner>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	// I set adc_conv_complete_flag variable to 1 when, HAL_ADC_ConvCpltCallback function is call.
	adc_conv_complete_flag = 1;
}

void spinner(double set_final_angle, double current_orientation){
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80010da:	e9c7 2300 	strd	r2, r3, [r7]
	double delta_theta = fmod((set_final_angle - current_orientation + 2*M_PI),(2*M_PI)) - 2*M_PI;
 80010de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010e6:	f7ff f837 	bl	8000158 <__aeabi_dsub>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	a335      	add	r3, pc, #212	; (adr r3, 80011c8 <spinner+0xf8>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff f830 	bl	800015c <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	a330      	add	r3, pc, #192	; (adr r3, 80011c8 <spinner+0xf8>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f004 fe59 	bl	8005dc0 <fmod>
 800110e:	a32e      	add	r3, pc, #184	; (adr r3, 80011c8 <spinner+0xf8>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff f820 	bl	8000158 <__aeabi_dsub>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	reset_encoder(&encoder_instance_3);
 8001120:	482d      	ldr	r0, [pc, #180]	; (80011d8 <spinner+0x108>)
 8001122:	f7ff ff63 	bl	8000fec <reset_encoder>
	reset_encoder(&encoder_instance_4);
 8001126:	482d      	ldr	r0, [pc, #180]	; (80011dc <spinner+0x10c>)
 8001128:	f7ff ff60 	bl	8000fec <reset_encoder>
		 if(delta_theta > 0){
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001138:	f7ff fc56 	bl	80009e8 <__aeabi_dcmpgt>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00a      	beq.n	8001158 <spinner+0x88>
			  //rotate counter-clockwise:
			  DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, 135);
 8001142:	2287      	movs	r2, #135	; 0x87
 8001144:	2101      	movs	r1, #1
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fe5a 	bl	8000e00 <DC_MOTOR_Start>
			  DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 127);
 800114c:	227f      	movs	r2, #127	; 0x7f
 800114e:	2101      	movs	r1, #1
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff fe55 	bl	8000e00 <DC_MOTOR_Start>
 8001156:	e009      	b.n	800116c <spinner+0x9c>
		  }else{
			  //rotate clockwise:
			  DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 135);
 8001158:	2287      	movs	r2, #135	; 0x87
 800115a:	2100      	movs	r1, #0
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fe4f 	bl	8000e00 <DC_MOTOR_Start>
			  DC_MOTOR_Start(DC_MOTOR2, DIR_CW, 127);
 8001162:	227f      	movs	r2, #127	; 0x7f
 8001164:	2100      	movs	r1, #0
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fe4a 	bl	8000e00 <DC_MOTOR_Start>
		  }

		  //while(!(MOTOR1_distance==SPIN_RADIUS*fabs(delta_theta)));			//might have to take avg of the 2 distances
		 delay = (int)(DISTANCE_SCALE*SPIN_RADIUS*fabs(delta_theta)*TICKS_PER_CM_TURN);
 800116c:	693c      	ldr	r4, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <spinner+0x110>)
 800117a:	4620      	mov	r0, r4
 800117c:	4629      	mov	r1, r5
 800117e:	f7ff f9a3 	bl	80004c8 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	a311      	add	r3, pc, #68	; (adr r3, 80011d0 <spinner+0x100>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff f99a 	bl	80004c8 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fc44 	bl	8000a28 <__aeabi_d2iz>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <spinner+0x114>)
 80011a4:	6013      	str	r3, [r2, #0]
		 HAL_Delay(delay);														//Using feedforward solution
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <spinner+0x114>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fe56 	bl	8002e5c <HAL_Delay>
		 // Stop Motors:
		 DC_MOTOR_Stop(DC_MOTOR1);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff feb5 	bl	8000f20 <DC_MOTOR_Stop>
		 DC_MOTOR_Stop(DC_MOTOR2);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff feb2 	bl	8000f20 <DC_MOTOR_Stop>
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdb0      	pop	{r4, r5, r7, pc}
 80011c4:	f3af 8000 	nop.w
 80011c8:	54442d18 	.word	0x54442d18
 80011cc:	401921fb 	.word	0x401921fb
 80011d0:	5ec3dab6 	.word	0x5ec3dab6
 80011d4:	404cf028 	.word	0x404cf028
 80011d8:	20000278 	.word	0x20000278
 80011dc:	20000284 	.word	0x20000284
 80011e0:	40260000 	.word	0x40260000
 80011e4:	2000026c 	.word	0x2000026c

080011e8 <obstacle_delay>:

int obstacle_delay(int delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	int obstacle_found = -1;
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	617b      	str	r3, [r7, #20]
	int num_of_delays = delay/delta_delay+1;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <obstacle_delay+0x88>)
 80011fa:	fb82 1203 	smull	r1, r2, r2, r3
 80011fe:	1092      	asrs	r2, r2, #2
 8001200:	17db      	asrs	r3, r3, #31
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
	int i;
	for(i=0;i<num_of_delays;i++)
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	e026      	b.n	800125c <obstacle_delay+0x74>
	{
		HAL_Delay(delta_delay);
 800120e:	200a      	movs	r0, #10
 8001210:	f001 fe24 	bl	8002e5c <HAL_Delay>
    // Script for polling of ir sensor
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_RESET ||HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==GPIO_PIN_RESET || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET)
 8001214:	2101      	movs	r1, #1
 8001216:	4817      	ldr	r0, [pc, #92]	; (8001274 <obstacle_delay+0x8c>)
 8001218:	f002 fb9a 	bl	8003950 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00d      	beq.n	800123e <obstacle_delay+0x56>
 8001222:	2102      	movs	r1, #2
 8001224:	4813      	ldr	r0, [pc, #76]	; (8001274 <obstacle_delay+0x8c>)
 8001226:	f002 fb93 	bl	8003950 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <obstacle_delay+0x56>
 8001230:	2110      	movs	r1, #16
 8001232:	4810      	ldr	r0, [pc, #64]	; (8001274 <obstacle_delay+0x8c>)
 8001234:	f002 fb8c 	bl	8003950 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <obstacle_delay+0x6e>
    {
      obstacle_found = i;
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	617b      	str	r3, [r7, #20]
      DC_MOTOR_Stop(DC_MOTOR1);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fe6c 	bl	8000f20 <DC_MOTOR_Stop>
      DC_MOTOR_Stop(DC_MOTOR2);
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff fe69 	bl	8000f20 <DC_MOTOR_Stop>
      HAL_Delay(10);
 800124e:	200a      	movs	r0, #10
 8001250:	f001 fe04 	bl	8002e5c <HAL_Delay>
      break;
 8001254:	e006      	b.n	8001264 <obstacle_delay+0x7c>
	for(i=0;i<num_of_delays;i++)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	3301      	adds	r3, #1
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbd4      	blt.n	800120e <obstacle_delay+0x26>
    }
	}
	return obstacle_found;
 8001264:	697b      	ldr	r3, [r7, #20]

}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	66666667 	.word	0x66666667
 8001274:	40010800 	.word	0x40010800

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800127c:	b0da      	sub	sp, #360	; 0x168
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f001 fd8a 	bl	8002d98 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 ff8a 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f001 fa20 	bl	80026cc <MX_GPIO_Init>
  MX_DMA_Init();
 800128c:	f001 fa00 	bl	8002690 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001290:	f001 f9aa 	bl	80025e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001294:	f001 f81c 	bl	80022d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001298:	f001 f89e 	bl	80023d8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800129c:	f000 ffda 	bl	8002254 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012a0:	f001 f8f2 	bl	8002488 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012a4:	f001 f948 	bl	8002538 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80012a8:	f001 f9c8 	bl	800263c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  	//ESP_Init("Archit2004","12345678");

    //HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_dma_result , adc_channel_count); 	// Initialize the DMA conversion
    DC_MOTOR_Init(DC_MOTOR1);				// Initialization of motors
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fbe3 	bl	8000a78 <DC_MOTOR_Init>
    DC_MOTOR_Init(DC_MOTOR2);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fbe0 	bl	8000a78 <DC_MOTOR_Init>

	DC_MOTOR_Stop(DC_MOTOR1);				// Because Motors run Randomly
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fe31 	bl	8000f20 <DC_MOTOR_Stop>
	DC_MOTOR_Stop(DC_MOTOR2);
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff fe2e 	bl	8000f20 <DC_MOTOR_Stop>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);		//
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ca:	48ce      	ldr	r0, [pc, #824]	; (8001604 <main+0x38c>)
 80012cc:	f002 fb57 	bl	800397e <HAL_GPIO_WritePin>

    //int poly_x[] = {0, 1, 2, 3, 2, 1};							//Structure of test polygon
    //int poly_y[] = {0, 1, 1, 0, -1, -1};

    point _point[] = {{0,0},{100,100},{200,100},{300,0},{200,-100},{100,-100}};			//[cm]
 80012d0:	4bcd      	ldr	r3, [pc, #820]	; (8001608 <main+0x390>)
 80012d2:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80012d6:	4619      	mov	r1, r3
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	461a      	mov	r2, r3
 80012dc:	f004 fd58 	bl	8005d90 <memcpy>

    int min_x = _point[0].x;
 80012e0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fb9e 	bl	8000a28 <__aeabi_d2iz>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    int max_x = _point[0].x;
 80012f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fb95 	bl	8000a28 <__aeabi_d2iz>
 80012fe:	4603      	mov	r3, r0
 8001300:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    int argmax_x = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    int argmin_x = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    //Convex Polygon
    int j = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    int number_of_points = 6;
 8001316:	2306      	movs	r3, #6
 8001318:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    for(;j<number_of_points;j++)
 800131c:	e058      	b.n	80013d0 <main+0x158>
    {
    	if(min_x>_point[j].x){
 800131e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8001322:	f7ff f867 	bl	80003f4 <__aeabi_i2d>
 8001326:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001330:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001334:	4413      	add	r3, r2
 8001336:	3bf0      	subs	r3, #240	; 0xf0
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff fb54 	bl	80009e8 <__aeabi_dcmpgt>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d015      	beq.n	8001372 <main+0xfa>
    		argmin_x = j;
 8001346:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800134a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    		min_x = _point[j].x;
 800134e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001358:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800135c:	4413      	add	r3, r2
 800135e:	3bf0      	subs	r3, #240	; 0xf0
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fb5e 	bl	8000a28 <__aeabi_d2iz>
 800136c:	4603      	mov	r3, r0
 800136e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    	}
    	if(max_x<_point[j].x){
 8001372:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8001376:	f7ff f83d 	bl	80003f4 <__aeabi_i2d>
 800137a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001384:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001388:	4413      	add	r3, r2
 800138a:	3bf0      	subs	r3, #240	; 0xf0
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff fb0c 	bl	80009ac <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d015      	beq.n	80013c6 <main+0x14e>
    		argmax_x = j;
 800139a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800139e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    		max_x = _point[j].x;
 80013a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80013ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80013b0:	4413      	add	r3, r2
 80013b2:	3bf0      	subs	r3, #240	; 0xf0
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fb34 	bl	8000a28 <__aeabi_d2iz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    for(;j<number_of_points;j++)
 80013c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013ca:	3301      	adds	r3, #1
 80013cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80013d0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80013d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80013d8:	429a      	cmp	r2, r3
 80013da:	dba0      	blt.n	800131e <main+0xa6>
    	}
    }
    int top_segments = abs(argmax_x-argmin_x);
 80013dc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80013e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bfb8      	it	lt
 80013ea:	425b      	neglt	r3, r3
 80013ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    int bottom_segments = number_of_points - abs(argmax_x-argmin_x);
 80013f0:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80013f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013fe:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001402:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    segment _segm_top[top_segments];
 800140c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001410:	1e4b      	subs	r3, r1, #1
 8001412:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001416:	460a      	mov	r2, r1
 8001418:	2300      	movs	r3, #0
 800141a:	643a      	str	r2, [r7, #64]	; 0x40
 800141c:	647b      	str	r3, [r7, #68]	; 0x44
 800141e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001422:	1890      	adds	r0, r2, r2
 8001424:	6238      	str	r0, [r7, #32]
 8001426:	415b      	adcs	r3, r3
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800142e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001430:	1814      	adds	r4, r2, r0
 8001432:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001434:	eb43 0000 	adc.w	r0, r3, r0
 8001438:	4605      	mov	r5, r0
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	01ab      	lsls	r3, r5, #6
 8001444:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001448:	01a2      	lsls	r2, r4, #6
 800144a:	460a      	mov	r2, r1
 800144c:	2300      	movs	r3, #0
 800144e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001452:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001456:	4622      	mov	r2, r4
 8001458:	462b      	mov	r3, r5
 800145a:	1890      	adds	r0, r2, r2
 800145c:	61b8      	str	r0, [r7, #24]
 800145e:	415b      	adcs	r3, r3
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001466:	4620      	mov	r0, r4
 8001468:	eb12 0800 	adds.w	r8, r2, r0
 800146c:	4628      	mov	r0, r5
 800146e:	eb43 0900 	adc.w	r9, r3, r0
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800147e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001482:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001486:	460a      	mov	r2, r1
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	3307      	adds	r3, #7
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	ebad 0d03 	sub.w	sp, sp, r3
 800149a:	466b      	mov	r3, sp
 800149c:	3307      	adds	r3, #7
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    segment _segm_bottom[bottom_segments];
 80014a6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80014aa:	1e4b      	subs	r3, r1, #1
 80014ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80014b0:	460a      	mov	r2, r1
 80014b2:	2300      	movs	r3, #0
 80014b4:	633a      	str	r2, [r7, #48]	; 0x30
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
 80014b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014bc:	4622      	mov	r2, r4
 80014be:	462b      	mov	r3, r5
 80014c0:	1890      	adds	r0, r2, r2
 80014c2:	6138      	str	r0, [r7, #16]
 80014c4:	415b      	adcs	r3, r3
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014cc:	4620      	mov	r0, r4
 80014ce:	1810      	adds	r0, r2, r0
 80014d0:	60b8      	str	r0, [r7, #8]
 80014d2:	4628      	mov	r0, r5
 80014d4:	eb43 0000 	adc.w	r0, r3, r0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80014e6:	4628      	mov	r0, r5
 80014e8:	0183      	lsls	r3, r0, #6
 80014ea:	4620      	mov	r0, r4
 80014ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014f0:	4620      	mov	r0, r4
 80014f2:	0182      	lsls	r2, r0, #6
 80014f4:	460a      	mov	r2, r1
 80014f6:	2300      	movs	r3, #0
 80014f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001500:	4622      	mov	r2, r4
 8001502:	462b      	mov	r3, r5
 8001504:	1890      	adds	r0, r2, r2
 8001506:	6038      	str	r0, [r7, #0]
 8001508:	415b      	adcs	r3, r3
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001510:	4620      	mov	r0, r4
 8001512:	eb12 0a00 	adds.w	sl, r2, r0
 8001516:	4628      	mov	r0, r5
 8001518:	eb43 0b00 	adc.w	fp, r3, r0
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800152c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001530:	460a      	mov	r2, r1
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	3307      	adds	r3, #7
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	ebad 0d03 	sub.w	sp, sp, r3
 8001544:	466b      	mov	r3, sp
 8001546:	3307      	adds	r3, #7
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    int i;
    for(i=0;i<top_segments;i++)		//top segments defined.
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001556:	e04a      	b.n	80015ee <main+0x376>
    {
    	_segm_top[i].p1 = &_point[(argmin_x+i)%number_of_points];
 8001558:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800155c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001560:	4413      	add	r3, r2
 8001562:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001566:	fb93 f2f2 	sdiv	r2, r3, r2
 800156a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800156e:	fb01 f202 	mul.w	r2, r1, r2
 8001572:	1a9b      	subs	r3, r3, r2
 8001574:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	18d1      	adds	r1, r2, r3
 800157c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001580:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4403      	add	r3, r0
 800158e:	6019      	str	r1, [r3, #0]
    	_segm_top[i].p2 = &_point[(argmin_x+i+1)%number_of_points];
 8001590:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001594:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001598:	4413      	add	r3, r2
 800159a:	3301      	adds	r3, #1
 800159c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80015a0:	fb93 f2f2 	sdiv	r2, r3, r2
 80015a4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80015a8:	fb01 f202 	mul.w	r2, r1, r2
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	18d1      	adds	r1, r2, r3
 80015b6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80015ba:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4403      	add	r3, r0
 80015c8:	3304      	adds	r3, #4
 80015ca:	6019      	str	r1, [r3, #0]
    	calculate_segment(&_segm_top[i]);
 80015cc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80015dc:	4413      	add	r3, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fd16 	bl	8001010 <calculate_segment>
    for(i=0;i<top_segments;i++)		//top segments defined.
 80015e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015e8:	3301      	adds	r3, #1
 80015ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80015ee:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80015f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dbae      	blt.n	8001558 <main+0x2e0>
    }
    for(i=0;i<bottom_segments;i++)		//Bottom segments defined.
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001600:	e05b      	b.n	80016ba <main+0x442>
 8001602:	bf00      	nop
 8001604:	40010800 	.word	0x40010800
 8001608:	080066b8 	.word	0x080066b8
    {
      _segm_bottom[bottom_segments-i-1].p2 = &_point[(argmax_x+i)%number_of_points];
 800160c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001610:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001614:	4413      	add	r3, r2
 8001616:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800161a:	fb93 f2f2 	sdiv	r2, r3, r2
 800161e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001622:	fb01 f202 	mul.w	r2, r1, r2
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800162c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001630:	1a8a      	subs	r2, r1, r2
 8001632:	3a01      	subs	r2, #1
 8001634:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4419      	add	r1, r3
 800163c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4403      	add	r3, r0
 800164a:	3304      	adds	r3, #4
 800164c:	6019      	str	r1, [r3, #0]
      _segm_bottom[bottom_segments-i-1].p1 = &_point[(argmax_x+i+1)%number_of_points];
 800164e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001652:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001656:	4413      	add	r3, r2
 8001658:	3301      	adds	r3, #1
 800165a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800165e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001662:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001666:	fb01 f202 	mul.w	r2, r1, r2
 800166a:	1a9b      	subs	r3, r3, r2
 800166c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001670:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001674:	1a8a      	subs	r2, r1, r2
 8001676:	3a01      	subs	r2, #1
 8001678:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4419      	add	r1, r3
 8001680:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4403      	add	r3, r0
 800168e:	6019      	str	r1, [r3, #0]
      calculate_segment(&_segm_bottom[bottom_segments-i-1]);
 8001690:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001694:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	1e5a      	subs	r2, r3, #1
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80016a8:	4413      	add	r3, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fcb0 	bl	8001010 <calculate_segment>
    for(i=0;i<bottom_segments;i++)		//Bottom segments defined.
 80016b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80016b4:	3301      	adds	r3, #1
 80016b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80016ba:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80016be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dba2      	blt.n	800160c <main+0x394>
    }

    //polygon definition ends here
    double curr_x = 0;
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    double curr_y = 0;
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    double theta = 0;
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
    double prev_setpoint_x = 0;
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
    double prev_setpoint_y =0;
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    double prev_setpoint_theta =0;
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
    double next_setpoint_x = _segm_top[argmin_x].p1->x;
 800170e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001712:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    double next_setpoint_y = _segm_top[argmin_x].p1->y;
 800172a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800172e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001742:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    double next_setpoint_theta = atan2((_segm_top[argmin_x].p1->y - curr_y), (_segm_top[argmin_x].p1->x - curr_x));
 8001746:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800174a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800175e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001762:	f7fe fcf9 	bl	8000158 <__aeabi_dsub>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	461d      	mov	r5, r3
 800176e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001772:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001786:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800178a:	f7fe fce5 	bl	8000158 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4620      	mov	r0, r4
 8001794:	4629      	mov	r1, r5
 8001796:	f004 fb11 	bl	8005dbc <atan2>
 800179a:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(mode == 1){									//control was switched to manual.
 800179e:	4ba8      	ldr	r3, [pc, #672]	; (8001a40 <main+0x7c8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d14a      	bne.n	800183c <main+0x5c4>
		  if(rx_buff[0]==51){
 80017a6:	4ba7      	ldr	r3, [pc, #668]	; (8001a44 <main+0x7cc>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b33      	cmp	r3, #51	; 0x33
 80017ac:	d10a      	bne.n	80017c4 <main+0x54c>
			  //Forward
			  DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 127);
 80017ae:	227f      	movs	r2, #127	; 0x7f
 80017b0:	2100      	movs	r1, #0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fb24 	bl	8000e00 <DC_MOTOR_Start>
			  DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 127);
 80017b8:	227f      	movs	r2, #127	; 0x7f
 80017ba:	2101      	movs	r1, #1
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fb1f 	bl	8000e00 <DC_MOTOR_Start>
 80017c2:	e037      	b.n	8001834 <main+0x5bc>

		  }else if(rx_buff[0]==52){
 80017c4:	4b9f      	ldr	r3, [pc, #636]	; (8001a44 <main+0x7cc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b34      	cmp	r3, #52	; 0x34
 80017ca:	d10a      	bne.n	80017e2 <main+0x56a>
			  //Reverse
			  DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, 127);
 80017cc:	227f      	movs	r2, #127	; 0x7f
 80017ce:	2101      	movs	r1, #1
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fb15 	bl	8000e00 <DC_MOTOR_Start>
			  DC_MOTOR_Start(DC_MOTOR2, DIR_CW, 127);
 80017d6:	227f      	movs	r2, #127	; 0x7f
 80017d8:	2100      	movs	r1, #0
 80017da:	2001      	movs	r0, #1
 80017dc:	f7ff fb10 	bl	8000e00 <DC_MOTOR_Start>
 80017e0:	e028      	b.n	8001834 <main+0x5bc>
		  }else if(rx_buff[0]==53){
 80017e2:	4b98      	ldr	r3, [pc, #608]	; (8001a44 <main+0x7cc>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b35      	cmp	r3, #53	; 0x35
 80017e8:	d10a      	bne.n	8001800 <main+0x588>
			  //Left
			  DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, 127);
 80017ea:	227f      	movs	r2, #127	; 0x7f
 80017ec:	2101      	movs	r1, #1
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff fb06 	bl	8000e00 <DC_MOTOR_Start>
			  DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 127);
 80017f4:	227f      	movs	r2, #127	; 0x7f
 80017f6:	2101      	movs	r1, #1
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff fb01 	bl	8000e00 <DC_MOTOR_Start>
 80017fe:	e019      	b.n	8001834 <main+0x5bc>
		  }else if(rx_buff[0]==54){
 8001800:	4b90      	ldr	r3, [pc, #576]	; (8001a44 <main+0x7cc>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b36      	cmp	r3, #54	; 0x36
 8001806:	d10a      	bne.n	800181e <main+0x5a6>
			  //Right
			  DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 127);
 8001808:	227f      	movs	r2, #127	; 0x7f
 800180a:	2100      	movs	r1, #0
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff faf7 	bl	8000e00 <DC_MOTOR_Start>
			  DC_MOTOR_Start(DC_MOTOR2, DIR_CW, 127);
 8001812:	227f      	movs	r2, #127	; 0x7f
 8001814:	2100      	movs	r1, #0
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff faf2 	bl	8000e00 <DC_MOTOR_Start>
 800181c:	e00a      	b.n	8001834 <main+0x5bc>
		  }else if(rx_buff[0]==49){
 800181e:	4b89      	ldr	r3, [pc, #548]	; (8001a44 <main+0x7cc>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b31      	cmp	r3, #49	; 0x31
 8001824:	f040 84af 	bne.w	8002186 <main+0xf0e>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182e:	4886      	ldr	r0, [pc, #536]	; (8001a48 <main+0x7d0>)
 8001830:	f002 f8a5 	bl	800397e <HAL_GPIO_WritePin>
		  }else{
			  continue;							//Corresponding to UART code '7' 55.
		  }

		  HAL_Delay(4);							//To avoid rapid switching of motor.
 8001834:	2004      	movs	r0, #4
 8001836:	f001 fb11 	bl	8002e5c <HAL_Delay>
 800183a:	e7b0      	b.n	800179e <main+0x526>
	  }else{
		  //RUN IN AUTO MODE


		  spinner(next_setpoint_theta, theta);
 800183c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001840:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001844:	f7ff fc44 	bl	80010d0 <spinner>
		  theta = next_setpoint_theta;
 8001848:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800184c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

			  //Go Straight:
			reset_encoder(&encoder_instance_3);
 8001850:	487e      	ldr	r0, [pc, #504]	; (8001a4c <main+0x7d4>)
 8001852:	f7ff fbcb 	bl	8000fec <reset_encoder>
			reset_encoder(&encoder_instance_4);
 8001856:	487e      	ldr	r0, [pc, #504]	; (8001a50 <main+0x7d8>)
 8001858:	f7ff fbc8 	bl	8000fec <reset_encoder>

			  DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 200);	//Left motor clockwise from inside.
 800185c:	22c8      	movs	r2, #200	; 0xc8
 800185e:	2100      	movs	r1, #0
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff facd 	bl	8000e00 <DC_MOTOR_Start>
			  DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 200); 	//Right motor anti clockwise from inside.
 8001866:	22c8      	movs	r2, #200	; 0xc8
 8001868:	2101      	movs	r1, #1
 800186a:	2001      	movs	r0, #1
 800186c:	f7ff fac8 	bl	8000e00 <DC_MOTOR_Start>

			delay = (int)(sqrt((prev_setpoint_x-next_setpoint_x)*(prev_setpoint_x-next_setpoint_x)+(prev_setpoint_y-next_setpoint_y)*(prev_setpoint_y-next_setpoint_y))*DISTANCE_SCALE*TICKS_PER_CM);
 8001870:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001874:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8001878:	f7fe fc6e 	bl	8000158 <__aeabi_dsub>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4614      	mov	r4, r2
 8001882:	461d      	mov	r5, r3
 8001884:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001888:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800188c:	f7fe fc64 	bl	8000158 <__aeabi_dsub>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fe16 	bl	80004c8 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4614      	mov	r4, r2
 80018a2:	461d      	mov	r5, r3
 80018a4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018a8:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80018ac:	f7fe fc54 	bl	8000158 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4690      	mov	r8, r2
 80018b6:	4699      	mov	r9, r3
 80018b8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018bc:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80018c0:	f7fe fc4a 	bl	8000158 <__aeabi_dsub>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4640      	mov	r0, r8
 80018ca:	4649      	mov	r1, r9
 80018cc:	f7fe fdfc 	bl	80004c8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fc40 	bl	800015c <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f004 fa94 	bl	8005e10 <sqrt>
 80018e8:	a351      	add	r3, pc, #324	; (adr r3, 8001a30 <main+0x7b8>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fdeb 	bl	80004c8 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f895 	bl	8000a28 <__aeabi_d2iz>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a54      	ldr	r2, [pc, #336]	; (8001a54 <main+0x7dc>)
 8001902:	6013      	str	r3, [r2, #0]
			int x = obstacle_delay(delay);
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <main+0x7dc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fc6d 	bl	80011e8 <obstacle_delay>
 800190e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if(x !=-1)
 8001912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191a:	d00e      	beq.n	800193a <main+0x6c2>
      {
          spinner(theta + M_PI, theta);
 800191c:	a346      	add	r3, pc, #280	; (adr r3, 8001a38 <main+0x7c0>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001926:	f7fe fc19 	bl	800015c <__adddf3>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001936:	f7ff fbcb 	bl	80010d0 <spinner>


			//while(MOTOR1_distance*MOTOR1_distance<=(prev_setpoint_x-next_setpoint_x)*(prev_setpoint_x-next_setpoint_x)+(prev_setpoint_y-next_setpoint_y)*(prev_setpoint_y-next_setpoint_y));

			// Stop Motors:
			DC_MOTOR_Stop(DC_MOTOR1);
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff faf0 	bl	8000f20 <DC_MOTOR_Stop>
			DC_MOTOR_Stop(DC_MOTOR2);
 8001940:	2001      	movs	r0, #1
 8001942:	f7ff faed 	bl	8000f20 <DC_MOTOR_Stop>
		    curr_x = next_setpoint_x;
 8001946:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800194a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
		    curr_y = next_setpoint_y;
 800194e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001952:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

		    //Update Setpoints:
			prev_setpoint_x = curr_x;
 8001956:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800195a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
		    prev_setpoint_y = curr_y;
 800195e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001962:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
		    prev_setpoint_theta = theta;
 8001966:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800196a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0

		    next_setpoint_theta = atan2((_segm_top[argmin_x].p2->y - curr_y), (_segm_top[argmin_x].p2->x - curr_x));
 800196e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001972:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	3304      	adds	r3, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001988:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800198c:	f7fe fbe4 	bl	8000158 <__aeabi_dsub>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4614      	mov	r4, r2
 8001996:	461d      	mov	r5, r3
 8001998:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800199c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	3304      	adds	r3, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80019b6:	f7fe fbcf 	bl	8000158 <__aeabi_dsub>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4620      	mov	r0, r4
 80019c0:	4629      	mov	r1, r5
 80019c2:	f004 f9fb 	bl	8005dbc <atan2>
 80019c6:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110
		    spinner(next_setpoint_theta, theta);
 80019ca:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80019ce:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80019d2:	f7ff fb7d 	bl	80010d0 <spinner>
		    theta = next_setpoint_theta;
 80019d6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019da:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

		    int top_i = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		    int bottom_i = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		    segment segment_top = _segm_top[0];
 80019ea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019ee:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80019f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80019f6:	4614      	mov	r4, r2
 80019f8:	461d      	mov	r5, r3
 80019fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a02:	e884 0003 	stmia.w	r4, {r0, r1}
		    segment segment_bottom = _segm_bottom[0];
 8001a06:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a0a:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001a0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a12:	4614      	mov	r4, r2
 8001a14:	461d      	mov	r5, r3
 8001a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a1e:	e884 0003 	stmia.w	r4, {r0, r1}

			  int i;
			  for(i=0;i < ceil(max_x-min_x/(2*delta_x));i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a28:	e38d      	b.n	8002146 <main+0xece>
 8001a2a:	bf00      	nop
 8001a2c:	f3af 8000 	nop.w
 8001a30:	72268e09 	.word	0x72268e09
 8001a34:	404bc71c 	.word	0x404bc71c
 8001a38:	54442d18 	.word	0x54442d18
 8001a3c:	400921fb 	.word	0x400921fb
 8001a40:	20000270 	.word	0x20000270
 8001a44:	20000274 	.word	0x20000274
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	20000278 	.word	0x20000278
 8001a50:	20000284 	.word	0x20000284
 8001a54:	2000026c 	.word	0x2000026c
		    {
		      next_setpoint_x = curr_x + delta_x;
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	4ba4      	ldr	r3, [pc, #656]	; (8001cf0 <main+0xa78>)
 8001a5e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001a62:	f7fe fb7b 	bl	800015c <__adddf3>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		      next_setpoint_y = next_setpoint_x*segment_top.m + segment_top.c;
 8001a6e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a7a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a7e:	f7fe fd23 	bl	80004c8 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a96:	f7fe fb61 	bl	800015c <__adddf3>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		      //Go Straight:
		      DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 200);	//Left motor clockwise from inside.
 8001aa2:	22c8      	movs	r2, #200	; 0xc8
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff f9aa 	bl	8000e00 <DC_MOTOR_Start>
			  DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 200); 	//Right motor anti clockwise from inside.
 8001aac:	22c8      	movs	r2, #200	; 0xc8
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff f9a5 	bl	8000e00 <DC_MOTOR_Start>

			  delay = (int)(sqrt((curr_x-next_setpoint_x)*(curr_x-next_setpoint_x)+(curr_y-next_setpoint_y)*(curr_y-next_setpoint_y))*DISTANCE_SCALE*TICKS_PER_CM);
 8001ab6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001aba:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001abe:	f7fe fb4b 	bl	8000158 <__aeabi_dsub>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4614      	mov	r4, r2
 8001ac8:	461d      	mov	r5, r3
 8001aca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ace:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001ad2:	f7fe fb41 	bl	8000158 <__aeabi_dsub>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fcf3 	bl	80004c8 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	461d      	mov	r5, r3
 8001aea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001aee:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001af2:	f7fe fb31 	bl	8000158 <__aeabi_dsub>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4690      	mov	r8, r2
 8001afc:	4699      	mov	r9, r3
 8001afe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001b02:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001b06:	f7fe fb27 	bl	8000158 <__aeabi_dsub>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4640      	mov	r0, r8
 8001b10:	4649      	mov	r1, r9
 8001b12:	f7fe fcd9 	bl	80004c8 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fb1d 	bl	800015c <__adddf3>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f004 f971 	bl	8005e10 <sqrt>
 8001b2e:	a36a      	add	r3, pc, #424	; (adr r3, 8001cd8 <main+0xa60>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fcc8 	bl	80004c8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe ff72 	bl	8000a28 <__aeabi_d2iz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a6b      	ldr	r2, [pc, #428]	; (8001cf4 <main+0xa7c>)
 8001b48:	6013      	str	r3, [r2, #0]
			  // HAL_Delay(delay);
          x = obstacle_delay(delay);
 8001b4a:	4b6a      	ldr	r3, [pc, #424]	; (8001cf4 <main+0xa7c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fb4a 	bl	80011e8 <obstacle_delay>
 8001b54:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
          if(x !=-1)
 8001b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d00e      	beq.n	8001b80 <main+0x908>
          {
              spinner(theta + M_PI, theta);
 8001b62:	a35f      	add	r3, pc, #380	; (adr r3, 8001ce0 <main+0xa68>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001b6c:	f7fe faf6 	bl	800015c <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001b7c:	f7ff faa8 	bl	80010d0 <spinner>
          }
//			  while(!(MOTOR1_distance*MOTOR1_distance==(curr_x-next_setpoint_x)*(curr_x-next_setpoint_x)+(curr_y-next_setpoint_y)*(curr_y-next_setpoint_y))){
//				  //Check for Sensor Reads:
//			    }
			    // Stop Motors:
			    DC_MOTOR_Stop(DC_MOTOR1);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff f9cd 	bl	8000f20 <DC_MOTOR_Stop>
			    DC_MOTOR_Stop(DC_MOTOR2);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f7ff f9ca 	bl	8000f20 <DC_MOTOR_Stop>

		      // Update Current State
		      curr_x = next_setpoint_x;
 8001b8c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001b90:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
		      curr_y = next_setpoint_y;
 8001b94:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001b98:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

		      next_setpoint_theta = -M_PI/2;
 8001b9c:	a352      	add	r3, pc, #328	; (adr r3, 8001ce8 <main+0xa70>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		      spinner(next_setpoint_theta, theta);
 8001ba6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001baa:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001bae:	f7ff fa8f 	bl	80010d0 <spinner>
		      theta = next_setpoint_theta;
 8001bb2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001bb6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

		      next_setpoint_x = curr_x;
 8001bba:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001bbe:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		      next_setpoint_y = curr_x*segment_bottom.m + segment_bottom.c;
 8001bc2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001bc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bce:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001bd2:	f7fe fc79 	bl	80004c8 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001be2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001be6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bea:	f7fe fab7 	bl	800015c <__adddf3>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		      //Go Straight:
		      DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 200);	//Left motor clockwise from inside.
 8001bf6:	22c8      	movs	r2, #200	; 0xc8
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff f900 	bl	8000e00 <DC_MOTOR_Start>
			    DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 200); 	//Right motor anti clockwise from inside.
 8001c00:	22c8      	movs	r2, #200	; 0xc8
 8001c02:	2101      	movs	r1, #1
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7ff f8fb 	bl	8000e00 <DC_MOTOR_Start>

			    delay = (int)(sqrt((curr_x-next_setpoint_x)*(curr_x-next_setpoint_x)+(curr_y-next_setpoint_y)*(curr_y-next_setpoint_y))*DISTANCE_SCALE*TICKS_PER_CM);
 8001c0a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c0e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001c12:	f7fe faa1 	bl	8000158 <__aeabi_dsub>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c22:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001c26:	f7fe fa97 	bl	8000158 <__aeabi_dsub>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fc49 	bl	80004c8 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4614      	mov	r4, r2
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c42:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001c46:	f7fe fa87 	bl	8000158 <__aeabi_dsub>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4690      	mov	r8, r2
 8001c50:	4699      	mov	r9, r3
 8001c52:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c56:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001c5a:	f7fe fa7d 	bl	8000158 <__aeabi_dsub>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4640      	mov	r0, r8
 8001c64:	4649      	mov	r1, r9
 8001c66:	f7fe fc2f 	bl	80004c8 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4620      	mov	r0, r4
 8001c70:	4629      	mov	r1, r5
 8001c72:	f7fe fa73 	bl	800015c <__adddf3>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f004 f8c7 	bl	8005e10 <sqrt>
 8001c82:	a315      	add	r3, pc, #84	; (adr r3, 8001cd8 <main+0xa60>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fc1e 	bl	80004c8 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe fec8 	bl	8000a28 <__aeabi_d2iz>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <main+0xa7c>)
 8001c9c:	6013      	str	r3, [r2, #0]
			     x = obstacle_delay(delay);
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <main+0xa7c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff faa0 	bl	80011e8 <obstacle_delay>
 8001ca8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
          if(x !=-1)
 8001cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d020      	beq.n	8001cf8 <main+0xa80>
          {
              spinner(theta + M_PI, theta);
 8001cb6:	a30a      	add	r3, pc, #40	; (adr r3, 8001ce0 <main+0xa68>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001cc0:	f7fe fa4c 	bl	800015c <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001cd0:	f7ff f9fe 	bl	80010d0 <spinner>
 8001cd4:	e010      	b.n	8001cf8 <main+0xa80>
 8001cd6:	bf00      	nop
 8001cd8:	72268e09 	.word	0x72268e09
 8001cdc:	404bc71c 	.word	0x404bc71c
 8001ce0:	54442d18 	.word	0x54442d18
 8001ce4:	400921fb 	.word	0x400921fb
 8001ce8:	54442d18 	.word	0x54442d18
 8001cec:	bff921fb 	.word	0xbff921fb
 8001cf0:	40140000 	.word	0x40140000
 8001cf4:	2000026c 	.word	0x2000026c
          
//			    while(!(MOTOR1_distance*MOTOR1_distance==(curr_x-next_setpoint_x)*(curr_x-next_setpoint_x)+(curr_y-next_setpoint_y)*(curr_y-next_setpoint_y))){
//				  //Check for Sensor Reads:
//			    }
			    // Stop Motors:
			    DC_MOTOR_Stop(DC_MOTOR1);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff f911 	bl	8000f20 <DC_MOTOR_Stop>
			    DC_MOTOR_Stop(DC_MOTOR2);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff f90e 	bl	8000f20 <DC_MOTOR_Stop>

		      // Update Current State
		      curr_x = next_setpoint_x;
 8001d04:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001d08:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
		      curr_y = next_setpoint_y;
 8001d0c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001d10:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

		      next_setpoint_theta = atan2((segment_bottom.p2->y - curr_y), (segment_bottom.p2->x - curr_x));
 8001d14:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d18:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d22:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001d26:	f7fe fa17 	bl	8000158 <__aeabi_dsub>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4614      	mov	r4, r2
 8001d30:	461d      	mov	r5, r3
 8001d32:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d40:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001d44:	f7fe fa08 	bl	8000158 <__aeabi_dsub>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f004 f834 	bl	8005dbc <atan2>
 8001d54:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110
		      spinner(next_setpoint_theta, theta);
 8001d58:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001d5c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001d60:	f7ff f9b6 	bl	80010d0 <spinner>
		      theta = next_setpoint_theta;
 8001d64:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001d68:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

		      next_setpoint_x = curr_x+delta_x;
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4ba5      	ldr	r3, [pc, #660]	; (8002008 <main+0xd90>)
 8001d72:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001d76:	f7fe f9f1 	bl	800015c <__adddf3>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		      next_setpoint_y = next_setpoint_x*segment_bottom.m + segment_bottom.c;
 8001d82:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d8a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d8e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001d92:	f7fe fb99 	bl	80004c8 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001da2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001da6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001daa:	f7fe f9d7 	bl	800015c <__adddf3>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		      //Go Straight:
		      DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 200);	//Left motor clockwise from inside.
 8001db6:	22c8      	movs	r2, #200	; 0xc8
 8001db8:	2100      	movs	r1, #0
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff f820 	bl	8000e00 <DC_MOTOR_Start>
			    DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 200); 	//Right motor anti clockwise from inside.
 8001dc0:	22c8      	movs	r2, #200	; 0xc8
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff f81b 	bl	8000e00 <DC_MOTOR_Start>

			    delay = (int)(sqrt((curr_x-next_setpoint_x)*(curr_x-next_setpoint_x)+(curr_y-next_setpoint_y)*(curr_y-next_setpoint_y))*DISTANCE_SCALE*TICKS_PER_CM);
 8001dca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001dce:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001dd2:	f7fe f9c1 	bl	8000158 <__aeabi_dsub>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4614      	mov	r4, r2
 8001ddc:	461d      	mov	r5, r3
 8001dde:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001de2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001de6:	f7fe f9b7 	bl	8000158 <__aeabi_dsub>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f7fe fb69 	bl	80004c8 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4614      	mov	r4, r2
 8001dfc:	461d      	mov	r5, r3
 8001dfe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e02:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001e06:	f7fe f9a7 	bl	8000158 <__aeabi_dsub>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e16:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001e1a:	f7fe f99d 	bl	8000158 <__aeabi_dsub>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4640      	mov	r0, r8
 8001e24:	4649      	mov	r1, r9
 8001e26:	f7fe fb4f 	bl	80004c8 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4620      	mov	r0, r4
 8001e30:	4629      	mov	r1, r5
 8001e32:	f7fe f993 	bl	800015c <__adddf3>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f003 ffe7 	bl	8005e10 <sqrt>
 8001e42:	a36b      	add	r3, pc, #428	; (adr r3, 8001ff0 <main+0xd78>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fb3e 	bl	80004c8 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fde8 	bl	8000a28 <__aeabi_d2iz>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a6c      	ldr	r2, [pc, #432]	; (800200c <main+0xd94>)
 8001e5c:	6013      	str	r3, [r2, #0]
		x = obstacle_delay(delay);
 8001e5e:	4b6b      	ldr	r3, [pc, #428]	; (800200c <main+0xd94>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f9c0 	bl	80011e8 <obstacle_delay>
 8001e68:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
          if(x !=-1)
 8001e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d00e      	beq.n	8001e94 <main+0xc1c>
          {
              spinner(theta + M_PI, theta);
 8001e76:	a360      	add	r3, pc, #384	; (adr r3, 8001ff8 <main+0xd80>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001e80:	f7fe f96c 	bl	800015c <__adddf3>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001e90:	f7ff f91e 	bl	80010d0 <spinner>

//			    while(!(MOTOR1_distance*MOTOR1_distance==(curr_x-next_setpoint_x)*(curr_x-next_setpoint_x)+(curr_y-next_setpoint_y)*(curr_y-next_setpoint_y))){
//				  //Check for Sensor Reads:
//			    }
			    // Stop Motors:
			    DC_MOTOR_Stop(DC_MOTOR1);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff f843 	bl	8000f20 <DC_MOTOR_Stop>
			    DC_MOTOR_Stop(DC_MOTOR2);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff f840 	bl	8000f20 <DC_MOTOR_Stop>

		      // Update Current State
		      curr_x = next_setpoint_x;
 8001ea0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ea4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
		      curr_y = next_setpoint_y;
 8001ea8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001eac:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

		      next_setpoint_theta = M_PI/2;
 8001eb0:	a353      	add	r3, pc, #332	; (adr r3, 8002000 <main+0xd88>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		      spinner(next_setpoint_theta, theta);
 8001eba:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001ebe:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001ec2:	f7ff f905 	bl	80010d0 <spinner>
		      theta = next_setpoint_theta;
 8001ec6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001eca:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

		      next_setpoint_x = curr_x;
 8001ece:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001ed2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		      next_setpoint_y = curr_x*segment_top.m + segment_top.c;
 8001ed6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ede:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ee2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001ee6:	f7fe faef 	bl	80004c8 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001efa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001efe:	f7fe f92d 	bl	800015c <__adddf3>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		      //Go Straight:
		      DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 200);	//Left motor clockwise from inside.
 8001f0a:	22c8      	movs	r2, #200	; 0xc8
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f7fe ff76 	bl	8000e00 <DC_MOTOR_Start>
			  DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 200); 	//Right motor anti clockwise from inside.
 8001f14:	22c8      	movs	r2, #200	; 0xc8
 8001f16:	2101      	movs	r1, #1
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7fe ff71 	bl	8000e00 <DC_MOTOR_Start>

			  delay = (int)(sqrt((curr_x-next_setpoint_x)*(curr_x-next_setpoint_x)+(curr_y-next_setpoint_y)*(curr_y-next_setpoint_y))*DISTANCE_SCALE*TICKS_PER_CM);
 8001f1e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001f22:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001f26:	f7fe f917 	bl	8000158 <__aeabi_dsub>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4614      	mov	r4, r2
 8001f30:	461d      	mov	r5, r3
 8001f32:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001f36:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001f3a:	f7fe f90d 	bl	8000158 <__aeabi_dsub>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe fabf 	bl	80004c8 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4614      	mov	r4, r2
 8001f50:	461d      	mov	r5, r3
 8001f52:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001f56:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001f5a:	f7fe f8fd 	bl	8000158 <__aeabi_dsub>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4690      	mov	r8, r2
 8001f64:	4699      	mov	r9, r3
 8001f66:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001f6a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001f6e:	f7fe f8f3 	bl	8000158 <__aeabi_dsub>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4640      	mov	r0, r8
 8001f78:	4649      	mov	r1, r9
 8001f7a:	f7fe faa5 	bl	80004c8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4620      	mov	r0, r4
 8001f84:	4629      	mov	r1, r5
 8001f86:	f7fe f8e9 	bl	800015c <__adddf3>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f003 ff3d 	bl	8005e10 <sqrt>
 8001f96:	a316      	add	r3, pc, #88	; (adr r3, 8001ff0 <main+0xd78>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe fa94 	bl	80004c8 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fd3e 	bl	8000a28 <__aeabi_d2iz>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a17      	ldr	r2, [pc, #92]	; (800200c <main+0xd94>)
 8001fb0:	6013      	str	r3, [r2, #0]
			  x = obstacle_delay(delay);
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <main+0xd94>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f916 	bl	80011e8 <obstacle_delay>
 8001fbc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
          if(x !=-1)
 8001fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d022      	beq.n	8002010 <main+0xd98>
          {
              spinner(theta + M_PI, theta);
 8001fca:	a30b      	add	r3, pc, #44	; (adr r3, 8001ff8 <main+0xd80>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001fd4:	f7fe f8c2 	bl	800015c <__adddf3>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001fe4:	f7ff f874 	bl	80010d0 <spinner>
 8001fe8:	e012      	b.n	8002010 <main+0xd98>
 8001fea:	bf00      	nop
 8001fec:	f3af 8000 	nop.w
 8001ff0:	72268e09 	.word	0x72268e09
 8001ff4:	404bc71c 	.word	0x404bc71c
 8001ff8:	54442d18 	.word	0x54442d18
 8001ffc:	400921fb 	.word	0x400921fb
 8002000:	54442d18 	.word	0x54442d18
 8002004:	3ff921fb 	.word	0x3ff921fb
 8002008:	40140000 	.word	0x40140000
 800200c:	2000026c 	.word	0x2000026c

//			  while(!(MOTOR1_distance*MOTOR1_distance==(curr_x-next_setpoint_x)*(curr_x-next_setpoint_x)+(curr_y-next_setpoint_y)*(curr_y-next_setpoint_y))){
//				  //Check for Sensor Reads:
//			    }
			    // Stop Motors:
			    DC_MOTOR_Stop(DC_MOTOR1);
 8002010:	2000      	movs	r0, #0
 8002012:	f7fe ff85 	bl	8000f20 <DC_MOTOR_Stop>
			    DC_MOTOR_Stop(DC_MOTOR2);
 8002016:	2001      	movs	r0, #1
 8002018:	f7fe ff82 	bl	8000f20 <DC_MOTOR_Stop>

		      // Update Current State
		      curr_x = next_setpoint_x;
 800201c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002020:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
		      curr_y = next_setpoint_y;
 8002024:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002028:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

		      next_setpoint_theta = atan2((segment_top.p2->y - curr_y), (segment_top.p2->x - curr_x));
 800202c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800203a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800203e:	f7fe f88b 	bl	8000158 <__aeabi_dsub>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4614      	mov	r4, r2
 8002048:	461d      	mov	r5, r3
 800204a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800204e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002058:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800205c:	f7fe f87c 	bl	8000158 <__aeabi_dsub>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4620      	mov	r0, r4
 8002066:	4629      	mov	r1, r5
 8002068:	f003 fea8 	bl	8005dbc <atan2>
 800206c:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110
		      spinner(next_setpoint_theta, theta);
 8002070:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002074:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002078:	f7ff f82a 	bl	80010d0 <spinner>
		      theta = next_setpoint_theta;
 800207c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002080:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

		      if(curr_x>segment_top.p2->x){
 8002084:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8002096:	f7fe fca7 	bl	80009e8 <__aeabi_dcmpgt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01f      	beq.n	80020e0 <main+0xe68>
		        top_i++;
 80020a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020a4:	3301      	adds	r3, #1
 80020a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		        if (top_i == top_segments)
 80020aa:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80020ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d06a      	beq.n	800218c <main+0xf14>
		        {
		          break;
		        }
		        segment_top = _segm_top[top_i];
 80020b6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80020ba:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 80020be:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80020c2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	4604      	mov	r4, r0
 80020d2:	461d      	mov	r5, r3
 80020d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020dc:	e884 0003 	stmia.w	r4, {r0, r1}
		      }
		      if(curr_x>segment_bottom.p2->x){
 80020e0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80020e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80020f2:	f7fe fc79 	bl	80009e8 <__aeabi_dcmpgt>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01f      	beq.n	800213c <main+0xec4>
		        bottom_i++;
 80020fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002100:	3301      	adds	r3, #1
 8002102:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		        if (bottom_i == bottom_segments)
 8002106:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800210a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800210e:	429a      	cmp	r2, r3
 8002110:	d03f      	beq.n	8002192 <main+0xf1a>
		        {
		          break;

		        }
		        segment_bottom = _segm_bottom[bottom_i];
 8002112:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002116:	f5a3 7090 	sub.w	r0, r3, #288	; 0x120
 800211a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800211e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	4604      	mov	r4, r0
 800212e:	461d      	mov	r5, r3
 8002130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002134:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002138:	e884 0003 	stmia.w	r4, {r0, r1}
			  for(i=0;i < ceil(max_x-min_x/(2*delta_x));i++)
 800213c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002140:	3301      	adds	r3, #1
 8002142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002146:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800214a:	f7fe f953 	bl	80003f4 <__aeabi_i2d>
 800214e:	4604      	mov	r4, r0
 8002150:	460d      	mov	r5, r1
 8002152:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <main+0xf20>)
 8002158:	fb82 1203 	smull	r1, r2, r2, r3
 800215c:	1092      	asrs	r2, r2, #2
 800215e:	17db      	asrs	r3, r3, #31
 8002160:	1a9a      	subs	r2, r3, r2
 8002162:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002166:	4413      	add	r3, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f943 	bl	80003f4 <__aeabi_i2d>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f7fe fc19 	bl	80009ac <__aeabi_dcmplt>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	f47f ac6b 	bne.w	8001a58 <main+0x7e0>
 8002182:	f7ff bb0c 	b.w	800179e <main+0x526>
			  continue;							//Corresponding to UART code '7' 55.
 8002186:	bf00      	nop
 8002188:	f7ff bb09 	b.w	800179e <main+0x526>
		          break;
 800218c:	bf00      	nop
 800218e:	f7ff bb06 	b.w	800179e <main+0x526>
		          break;
 8002192:	bf00      	nop
    if(mode == 1){									//control was switched to manual.
 8002194:	f7ff bb03 	b.w	800179e <main+0x526>
 8002198:	66666667 	.word	0x66666667

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b094      	sub	sp, #80	; 0x50
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a6:	2228      	movs	r2, #40	; 0x28
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fdfe 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021da:	2301      	movs	r3, #1
 80021dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021de:	2302      	movs	r3, #2
 80021e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f2:	4618      	mov	r0, r3
 80021f4:	f001 fbf4 	bl	80039e0 <HAL_RCC_OscConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80021fe:	f000 fb7b 	bl	80028f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002202:	230f      	movs	r3, #15
 8002204:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800220e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002212:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2102      	movs	r1, #2
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fe60 	bl	8003ee4 <HAL_RCC_ClockConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800222a:	f000 fb65 	bl	80028f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800222e:	2302      	movs	r3, #2
 8002230:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002236:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	4618      	mov	r0, r3
 800223c:	f001 ffe0 	bl	8004200 <HAL_RCCEx_PeriphCLKConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002246:	f000 fb57 	bl	80028f8 <Error_Handler>
  }
}
 800224a:	bf00      	nop
 800224c:	3750      	adds	r7, #80	; 0x50
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002266:	4a19      	ldr	r2, [pc, #100]	; (80022cc <MX_ADC1_Init+0x78>)
 8002268:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_ADC1_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002272:	2200      	movs	r2, #0
 8002274:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002278:	2200      	movs	r2, #0
 800227a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_ADC1_Init+0x74>)
 800227e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002282:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_ADC1_Init+0x74>)
 800228c:	2201      	movs	r2, #1
 800228e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002292:	f000 fe07 	bl	8002ea4 <HAL_ADC_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800229c:	f000 fb2c 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022a4:	2301      	movs	r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_ADC1_Init+0x74>)
 80022b2:	f000 fecf 	bl	8003054 <HAL_ADC_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80022bc:	f000 fb1c 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2000008c 	.word	0x2000008c
 80022cc:	40012400 	.word	0x40012400

080022d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b092      	sub	sp, #72	; 0x48
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
 80022f0:	615a      	str	r2, [r3, #20]
 80022f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	2220      	movs	r2, #32
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 fd56 	bl	8005dac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <MX_TIM1_Init+0x100>)
 8002302:	4a34      	ldr	r2, [pc, #208]	; (80023d4 <MX_TIM1_Init+0x104>)
 8002304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002306:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <MX_TIM1_Init+0x100>)
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <MX_TIM1_Init+0x100>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <MX_TIM1_Init+0x100>)
 8002314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002318:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <MX_TIM1_Init+0x100>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <MX_TIM1_Init+0x100>)
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <MX_TIM1_Init+0x100>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800232c:	4828      	ldr	r0, [pc, #160]	; (80023d0 <MX_TIM1_Init+0x100>)
 800232e:	f002 f875 	bl	800441c <HAL_TIM_PWM_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002338:	f000 fade 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002344:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002348:	4619      	mov	r1, r3
 800234a:	4821      	ldr	r0, [pc, #132]	; (80023d0 <MX_TIM1_Init+0x100>)
 800234c:	f002 fec0 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002356:	f000 facf 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800235a:	2360      	movs	r3, #96	; 0x60
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002362:	2300      	movs	r3, #0
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002366:	2300      	movs	r3, #0
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237a:	2200      	movs	r2, #0
 800237c:	4619      	mov	r1, r3
 800237e:	4814      	ldr	r0, [pc, #80]	; (80023d0 <MX_TIM1_Init+0x100>)
 8002380:	f002 fa78 	bl	8004874 <HAL_TIM_PWM_ConfigChannel>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800238a:	f000 fab5 	bl	80028f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4807      	ldr	r0, [pc, #28]	; (80023d0 <MX_TIM1_Init+0x100>)
 80023b2:	f002 feeb 	bl	800518c <HAL_TIMEx_ConfigBreakDeadTime>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80023bc:	f000 fa9c 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023c0:	4803      	ldr	r0, [pc, #12]	; (80023d0 <MX_TIM1_Init+0x100>)
 80023c2:	f000 fb6d 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 80023c6:	bf00      	nop
 80023c8:	3748      	adds	r7, #72	; 0x48
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200000bc 	.word	0x200000bc
 80023d4:	40012c00 	.word	0x40012c00

080023d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023de:	f107 0320 	add.w	r3, r7, #32
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	615a      	str	r2, [r3, #20]
 80023f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <MX_TIM2_Init+0xac>)
 80023fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002400:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <MX_TIM2_Init+0xac>)
 8002404:	2200      	movs	r2, #0
 8002406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <MX_TIM2_Init+0xac>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <MX_TIM2_Init+0xac>)
 8002410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002414:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <MX_TIM2_Init+0xac>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <MX_TIM2_Init+0xac>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002422:	4818      	ldr	r0, [pc, #96]	; (8002484 <MX_TIM2_Init+0xac>)
 8002424:	f001 fffa 	bl	800441c <HAL_TIM_PWM_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800242e:	f000 fa63 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	4619      	mov	r1, r3
 8002440:	4810      	ldr	r0, [pc, #64]	; (8002484 <MX_TIM2_Init+0xac>)
 8002442:	f002 fe45 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800244c:	f000 fa54 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002450:	2360      	movs	r3, #96	; 0x60
 8002452:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2208      	movs	r2, #8
 8002464:	4619      	mov	r1, r3
 8002466:	4807      	ldr	r0, [pc, #28]	; (8002484 <MX_TIM2_Init+0xac>)
 8002468:	f002 fa04 	bl	8004874 <HAL_TIM_PWM_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002472:	f000 fa41 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <MX_TIM2_Init+0xac>)
 8002478:	f000 fb12 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 800247c:	bf00      	nop
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000104 	.word	0x20000104

08002488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f003 fc88 	bl	8005dac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <MX_TIM3_Init+0xa8>)
 80024a6:	4a23      	ldr	r2, [pc, #140]	; (8002534 <MX_TIM3_Init+0xac>)
 80024a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <MX_TIM3_Init+0xa8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <MX_TIM3_Init+0xa8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <MX_TIM3_Init+0xa8>)
 80024b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <MX_TIM3_Init+0xa8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_TIM3_Init+0xa8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024d2:	2301      	movs	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024e2:	2301      	movs	r3, #1
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	480e      	ldr	r0, [pc, #56]	; (8002530 <MX_TIM3_Init+0xa8>)
 80024f6:	f002 f883 	bl	8004600 <HAL_TIM_Encoder_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002500:	f000 f9fa 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4807      	ldr	r0, [pc, #28]	; (8002530 <MX_TIM3_Init+0xa8>)
 8002512:	f002 fddd 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800251c:	f000 f9ec 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002520:	213c      	movs	r1, #60	; 0x3c
 8002522:	4803      	ldr	r0, [pc, #12]	; (8002530 <MX_TIM3_Init+0xa8>)
 8002524:	f002 f917 	bl	8004756 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	2000014c 	.word	0x2000014c
 8002534:	40000400 	.word	0x40000400

08002538 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fc30 	bl	8005dac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <MX_TIM4_Init+0xa8>)
 8002556:	4a23      	ldr	r2, [pc, #140]	; (80025e4 <MX_TIM4_Init+0xac>)
 8002558:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <MX_TIM4_Init+0xa8>)
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <MX_TIM4_Init+0xa8>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002566:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <MX_TIM4_Init+0xa8>)
 8002568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800256c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <MX_TIM4_Init+0xa8>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <MX_TIM4_Init+0xa8>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800257a:	2301      	movs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002582:	2301      	movs	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002592:	2301      	movs	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	4619      	mov	r1, r3
 80025a4:	480e      	ldr	r0, [pc, #56]	; (80025e0 <MX_TIM4_Init+0xa8>)
 80025a6:	f002 f82b 	bl	8004600 <HAL_TIM_Encoder_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80025b0:	f000 f9a2 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4807      	ldr	r0, [pc, #28]	; (80025e0 <MX_TIM4_Init+0xa8>)
 80025c2:	f002 fd85 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80025cc:	f000 f994 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80025d0:	213c      	movs	r1, #60	; 0x3c
 80025d2:	4803      	ldr	r0, [pc, #12]	; (80025e0 <MX_TIM4_Init+0xa8>)
 80025d4:	f002 f8bf 	bl	8004756 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	3730      	adds	r7, #48	; 0x30
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000194 	.word	0x20000194
 80025e4:	40000800 	.word	0x40000800

080025e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <MX_USART2_UART_Init+0x4c>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <MX_USART2_UART_Init+0x50>)
 80025f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <MX_USART2_UART_Init+0x4c>)
 80025f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_USART2_UART_Init+0x4c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <MX_USART2_UART_Init+0x4c>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <MX_USART2_UART_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MX_USART2_UART_Init+0x4c>)
 800260e:	220c      	movs	r2, #12
 8002610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <MX_USART2_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <MX_USART2_UART_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800261e:	4805      	ldr	r0, [pc, #20]	; (8002634 <MX_USART2_UART_Init+0x4c>)
 8002620:	f002 fe05 	bl	800522e <HAL_UART_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800262a:	f000 f965 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200001dc 	.word	0x200001dc
 8002638:	40004400 	.word	0x40004400

0800263c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <MX_USART3_UART_Init+0x50>)
 8002644:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800264c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002674:	f002 fddb 	bl	800522e <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800267e:	f000 f93b 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000224 	.word	0x20000224
 800268c:	40004800 	.word	0x40004800

08002690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_DMA_Init+0x38>)
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <MX_DMA_Init+0x38>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6153      	str	r3, [r2, #20]
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_DMA_Init+0x38>)
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	200b      	movs	r0, #11
 80026b4:	f000 fedf 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026b8:	200b      	movs	r0, #11
 80026ba:	f000 fef8 	bl	80034ae <HAL_NVIC_EnableIRQ>

}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000

080026cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e0:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <MX_GPIO_Init+0x148>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4a4b      	ldr	r2, [pc, #300]	; (8002814 <MX_GPIO_Init+0x148>)
 80026e6:	f043 0310 	orr.w	r3, r3, #16
 80026ea:	6193      	str	r3, [r2, #24]
 80026ec:	4b49      	ldr	r3, [pc, #292]	; (8002814 <MX_GPIO_Init+0x148>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f8:	4b46      	ldr	r3, [pc, #280]	; (8002814 <MX_GPIO_Init+0x148>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a45      	ldr	r2, [pc, #276]	; (8002814 <MX_GPIO_Init+0x148>)
 80026fe:	f043 0320 	orr.w	r3, r3, #32
 8002702:	6193      	str	r3, [r2, #24]
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <MX_GPIO_Init+0x148>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <MX_GPIO_Init+0x148>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4a3f      	ldr	r2, [pc, #252]	; (8002814 <MX_GPIO_Init+0x148>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6193      	str	r3, [r2, #24]
 800271c:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <MX_GPIO_Init+0x148>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002728:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <MX_GPIO_Init+0x148>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4a39      	ldr	r2, [pc, #228]	; (8002814 <MX_GPIO_Init+0x148>)
 800272e:	f043 0308 	orr.w	r3, r3, #8
 8002732:	6193      	str	r3, [r2, #24]
 8002734:	4b37      	ldr	r3, [pc, #220]	; (8002814 <MX_GPIO_Init+0x148>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	f241 2101 	movw	r1, #4609	; 0x1201
 8002746:	4834      	ldr	r0, [pc, #208]	; (8002818 <MX_GPIO_Init+0x14c>)
 8002748:	f001 f919 	bl	800397e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
 8002752:	4832      	ldr	r0, [pc, #200]	; (800281c <MX_GPIO_Init+0x150>)
 8002754:	f001 f913 	bl	800397e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002758:	2200      	movs	r2, #0
 800275a:	2104      	movs	r1, #4
 800275c:	4830      	ldr	r0, [pc, #192]	; (8002820 <MX_GPIO_Init+0x154>)
 800275e:	f001 f90e 	bl	800397e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	2130      	movs	r1, #48	; 0x30
 8002766:	482f      	ldr	r0, [pc, #188]	; (8002824 <MX_GPIO_Init+0x158>)
 8002768:	f001 f909 	bl	800397e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800276c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002772:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <MX_GPIO_Init+0x15c>)
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	4619      	mov	r1, r3
 8002780:	4825      	ldr	r0, [pc, #148]	; (8002818 <MX_GPIO_Init+0x14c>)
 8002782:	f000 ff61 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12;
 8002786:	f241 2301 	movw	r3, #4609	; 0x1201
 800278a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278c:	2301      	movs	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2302      	movs	r3, #2
 8002796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	4619      	mov	r1, r3
 800279e:	481e      	ldr	r0, [pc, #120]	; (8002818 <MX_GPIO_Init+0x14c>)
 80027a0:	f000 ff52 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80027a4:	f44f 63d4 	mov.w	r3, #1696	; 0x6a0
 80027a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027aa:	2301      	movs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	4619      	mov	r1, r3
 80027bc:	4817      	ldr	r0, [pc, #92]	; (800281c <MX_GPIO_Init+0x150>)
 80027be:	f000 ff43 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027c2:	2304      	movs	r3, #4
 80027c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c6:	2301      	movs	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2302      	movs	r3, #2
 80027d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4619      	mov	r1, r3
 80027d8:	4811      	ldr	r0, [pc, #68]	; (8002820 <MX_GPIO_Init+0x154>)
 80027da:	f000 ff35 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027de:	2330      	movs	r3, #48	; 0x30
 80027e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e2:	2301      	movs	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2302      	movs	r3, #2
 80027ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ee:	f107 0310 	add.w	r3, r7, #16
 80027f2:	4619      	mov	r1, r3
 80027f4:	480b      	ldr	r0, [pc, #44]	; (8002824 <MX_GPIO_Init+0x158>)
 80027f6:	f000 ff27 	bl	8003648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2028      	movs	r0, #40	; 0x28
 8002800:	f000 fe39 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002804:	2028      	movs	r0, #40	; 0x28
 8002806:	f000 fe52 	bl	80034ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800280a:	bf00      	nop
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	40011000 	.word	0x40011000
 800281c:	40010800 	.word	0x40010800
 8002820:	40011400 	.word	0x40011400
 8002824:	40010c00 	.word	0x40010c00
 8002828:	10110000 	.word	0x10110000

0800282c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart3, rx_buff, 3); //You need to toggle a breakpoint on this line!
 8002834:	2203      	movs	r2, #3
 8002836:	4911      	ldr	r1, [pc, #68]	; (800287c <HAL_UART_RxCpltCallback+0x50>)
 8002838:	4811      	ldr	r0, [pc, #68]	; (8002880 <HAL_UART_RxCpltCallback+0x54>)
 800283a:	f002 fd48 	bl	80052ce <HAL_UART_Receive_IT>

  if(rx_buff[0]==50){							//toggle automatic/manual control.
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_UART_RxCpltCallback+0x50>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b32      	cmp	r3, #50	; 0x32
 8002844:	d103      	bne.n	800284e <HAL_UART_RxCpltCallback+0x22>
	  mode = 0;
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_UART_RxCpltCallback+0x58>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
	  mode = 1;
	  DC_MOTOR_Stop(DC_MOTOR1);
	  DC_MOTOR_Stop(DC_MOTOR2);
	  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);		//Reset the Blower
  }
}
 800284c:	e012      	b.n	8002874 <HAL_UART_RxCpltCallback+0x48>
  }else if(rx_buff[0]== 48){
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_UART_RxCpltCallback+0x50>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b30      	cmp	r3, #48	; 0x30
 8002854:	d10e      	bne.n	8002874 <HAL_UART_RxCpltCallback+0x48>
	  mode = 1;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_UART_RxCpltCallback+0x58>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]
	  DC_MOTOR_Stop(DC_MOTOR1);
 800285c:	2000      	movs	r0, #0
 800285e:	f7fe fb5f 	bl	8000f20 <DC_MOTOR_Stop>
	  DC_MOTOR_Stop(DC_MOTOR2);
 8002862:	2001      	movs	r0, #1
 8002864:	f7fe fb5c 	bl	8000f20 <DC_MOTOR_Stop>
	  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);		//Reset the Blower
 8002868:	2200      	movs	r2, #0
 800286a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800286e:	4806      	ldr	r0, [pc, #24]	; (8002888 <HAL_UART_RxCpltCallback+0x5c>)
 8002870:	f001 f885 	bl	800397e <HAL_GPIO_WritePin>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000274 	.word	0x20000274
 8002880:	20000224 	.word	0x20000224
 8002884:	20000270 	.word	0x20000270
 8002888:	40010800 	.word	0x40010800

0800288c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
	//HANDLE_IR_SENSOR_DETECTION HERE!
	DC_MOTOR_Stop(DC_MOTOR1);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe fb42 	bl	8000f20 <DC_MOTOR_Stop>
	DC_MOTOR_Stop(DC_MOTOR2);
 800289c:	2001      	movs	r0, #1
 800289e:	f7fe fb3f 	bl	8000f20 <DC_MOTOR_Stop>
	HAL_Delay(4);
 80028a2:	2004      	movs	r0, #4
 80028a4:	f000 fada 	bl	8002e5c <HAL_Delay>

	DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 127);
 80028a8:	227f      	movs	r2, #127	; 0x7f
 80028aa:	2100      	movs	r1, #0
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe faa7 	bl	8000e00 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 127);
 80028b2:	227f      	movs	r2, #127	; 0x7f
 80028b4:	2101      	movs	r1, #1
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7fe faa2 	bl	8000e00 <DC_MOTOR_Start>
	HAL_Delay(750);
 80028bc:	f240 20ee 	movw	r0, #750	; 0x2ee
 80028c0:	f000 facc 	bl	8002e5c <HAL_Delay>

	DC_MOTOR_Stop(DC_MOTOR1);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe fb2b 	bl	8000f20 <DC_MOTOR_Stop>
	DC_MOTOR_Stop(DC_MOTOR2);
 80028ca:	2001      	movs	r0, #1
 80028cc:	f7fe fb28 	bl	8000f20 <DC_MOTOR_Stop>
	HAL_Delay(4);
 80028d0:	2004      	movs	r0, #4
 80028d2:	f000 fac3 	bl	8002e5c <HAL_Delay>

	DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 127);
 80028d6:	227f      	movs	r2, #127	; 0x7f
 80028d8:	2100      	movs	r1, #0
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe fa90 	bl	8000e00 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 127);
 80028e0:	227f      	movs	r2, #127	; 0x7f
 80028e2:	2101      	movs	r1, #1
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7fe fa8b 	bl	8000e00 <DC_MOTOR_Start>
	HAL_Delay(4);
 80028ea:	2004      	movs	r0, #4
 80028ec:	f000 fab6 	bl	8002e5c <HAL_Delay>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028fc:	b672      	cpsid	i
}
 80028fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002900:	e7fe      	b.n	8002900 <Error_Handler+0x8>
	...

08002904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_MspInit+0x5c>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_MspInit+0x5c>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6193      	str	r3, [r2, #24]
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_MspInit+0x5c>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_MspInit+0x5c>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <HAL_MspInit+0x5c>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	61d3      	str	r3, [r2, #28]
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_MspInit+0x5c>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_MspInit+0x60>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_MspInit+0x60>)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40021000 	.word	0x40021000
 8002964:	40010000 	.word	0x40010000

08002968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0318 	add.w	r3, r7, #24
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <HAL_ADC_MspInit+0xc4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d14d      	bne.n	8002a24 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 800298e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002992:	6193      	str	r3, [r2, #24]
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 80029a6:	f043 0310 	orr.w	r3, r3, #16
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a16      	ldr	r2, [pc, #88]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 80029d6:	f043 0308 	orr.w	r3, r3, #8
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_ADC_MspInit+0xc8>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029e8:	2302      	movs	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ec:	2303      	movs	r3, #3
 80029ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f0:	f107 0318 	add.w	r3, r7, #24
 80029f4:	4619      	mov	r1, r3
 80029f6:	480f      	ldr	r0, [pc, #60]	; (8002a34 <HAL_ADC_MspInit+0xcc>)
 80029f8:	f000 fe26 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a00:	2303      	movs	r3, #3
 8002a02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f107 0318 	add.w	r3, r7, #24
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480b      	ldr	r0, [pc, #44]	; (8002a38 <HAL_ADC_MspInit+0xd0>)
 8002a0c:	f000 fe1c 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a10:	2301      	movs	r3, #1
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a14:	2303      	movs	r3, #3
 8002a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a18:	f107 0318 	add.w	r3, r7, #24
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4807      	ldr	r0, [pc, #28]	; (8002a3c <HAL_ADC_MspInit+0xd4>)
 8002a20:	f000 fe12 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a24:	bf00      	nop
 8002a26:	3728      	adds	r7, #40	; 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40012400 	.word	0x40012400
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40011000 	.word	0x40011000
 8002a38:	40010800 	.word	0x40010800
 8002a3c:	40010c00 	.word	0x40010c00

08002a40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <HAL_TIM_PWM_MspInit+0x58>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10c      	bne.n	8002a6c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	4a11      	ldr	r2, [pc, #68]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a5c:	6193      	str	r3, [r2, #24]
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a6a:	e010      	b.n	8002a8e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a74:	d10b      	bne.n	8002a8e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	61d3      	str	r3, [r2, #28]
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_TIM_MspPostInit+0xbc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d119      	bne.n	8002af4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0314 	add.w	r3, r7, #20
 8002aea:	4619      	mov	r1, r3
 8002aec:	481d      	ldr	r0, [pc, #116]	; (8002b64 <HAL_TIM_MspPostInit+0xc4>)
 8002aee:	f000 fdab 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002af2:	e02f      	b.n	8002b54 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d12a      	bne.n	8002b54 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002b04:	f043 0308 	orr.w	r3, r3, #8
 8002b08:	6193      	str	r3, [r2, #24]
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2302      	movs	r3, #2
 8002b22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480f      	ldr	r0, [pc, #60]	; (8002b68 <HAL_TIM_MspPostInit+0xc8>)
 8002b2c:	f000 fd8c 	bl	8003648 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <HAL_TIM_MspPostInit+0xcc>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <HAL_TIM_MspPostInit+0xcc>)
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	6053      	str	r3, [r2, #4]
}
 8002b54:	bf00      	nop
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010800 	.word	0x40010800
 8002b68:	40010c00 	.word	0x40010c00
 8002b6c:	40010000 	.word	0x40010000

08002b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a42      	ldr	r2, [pc, #264]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d12c      	bne.n	8002bea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b90:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4a40      	ldr	r2, [pc, #256]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9a:	61d3      	str	r3, [r2, #28]
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4a3a      	ldr	r2, [pc, #232]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6193      	str	r3, [r2, #24]
 8002bb4:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	f107 031c 	add.w	r3, r7, #28
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4832      	ldr	r0, [pc, #200]	; (8002c9c <HAL_UART_MspInit+0x12c>)
 8002bd4:	f000 fd38 	bl	8003648 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2026      	movs	r0, #38	; 0x26
 8002bde:	f000 fc4a 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002be2:	2026      	movs	r0, #38	; 0x26
 8002be4:	f000 fc63 	bl	80034ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002be8:	e050      	b.n	8002c8c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2c      	ldr	r2, [pc, #176]	; (8002ca0 <HAL_UART_MspInit+0x130>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d14b      	bne.n	8002c8c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bf4:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfe:	61d3      	str	r3, [r2, #28]
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002c12:	f043 0310 	orr.w	r3, r3, #16
 8002c16:	6193      	str	r3, [r2, #24]
 8002c18:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	481a      	ldr	r0, [pc, #104]	; (8002ca4 <HAL_UART_MspInit+0x134>)
 8002c3a:	f000 fd05 	bl	8003648 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c44:	2300      	movs	r3, #0
 8002c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	4814      	ldr	r0, [pc, #80]	; (8002ca4 <HAL_UART_MspInit+0x134>)
 8002c54:	f000 fcf8 	bl	8003648 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <HAL_UART_MspInit+0x138>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	f043 0310 	orr.w	r3, r3, #16
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c76:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <HAL_UART_MspInit+0x138>)
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	2027      	movs	r0, #39	; 0x27
 8002c82:	f000 fbf8 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c86:	2027      	movs	r0, #39	; 0x27
 8002c88:	f000 fc11 	bl	80034ae <HAL_NVIC_EnableIRQ>
}
 8002c8c:	bf00      	nop
 8002c8e:	3730      	adds	r7, #48	; 0x30
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40004400 	.word	0x40004400
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010800 	.word	0x40010800
 8002ca0:	40004800 	.word	0x40004800
 8002ca4:	40011000 	.word	0x40011000
 8002ca8:	40010000 	.word	0x40010000

08002cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <NMI_Handler+0x4>

08002cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <HardFault_Handler+0x4>

08002cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <MemManage_Handler+0x4>

08002cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc2:	e7fe      	b.n	8002cc2 <BusFault_Handler+0x4>

08002cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <UsageFault_Handler+0x4>

08002cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf2:	f000 f897 	bl	8002e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f000 fe56 	bl	80039b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	//Uart_isr(&huart2);
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <USART2_IRQHandler+0x10>)
 8002d0e:	f002 fb03 	bl	8005318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200001dc 	.word	0x200001dc

08002d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//Uart_isr(&huart3);
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <USART3_IRQHandler+0x10>)
 8002d22:	f002 faf9 	bl	8005318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000224 	.word	0x20000224

08002d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002d34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d38:	f000 fe3a 	bl	80039b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d4c:	f7ff fff8 	bl	8002d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d50:	480b      	ldr	r0, [pc, #44]	; (8002d80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d52:	490c      	ldr	r1, [pc, #48]	; (8002d84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d54:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d68:	4c09      	ldr	r4, [pc, #36]	; (8002d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d76:	f002 ffe7 	bl	8005d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d7a:	f7fe fa7d 	bl	8001278 <main>
  bx lr
 8002d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d88:	08006810 	.word	0x08006810
  ldr r2, =_sbss
 8002d8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d90:	20000294 	.word	0x20000294

08002d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC1_2_IRQHandler>
	...

08002d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_Init+0x28>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <HAL_Init+0x28>)
 8002da2:	f043 0310 	orr.w	r3, r3, #16
 8002da6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da8:	2003      	movs	r0, #3
 8002daa:	f000 fb59 	bl	8003460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f000 f808 	bl	8002dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db4:	f7ff fda6 	bl	8002904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40022000 	.word	0x40022000

08002dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_InitTick+0x54>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_InitTick+0x58>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fb71 	bl	80034ca <HAL_SYSTICK_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00e      	b.n	8002e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	d80a      	bhi.n	8002e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f000 fb39 	bl	8003476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e04:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <HAL_InitTick+0x5c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000008 	.word	0x20000008
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_IncTick+0x1c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_IncTick+0x20>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <HAL_IncTick+0x20>)
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	20000008 	.word	0x20000008
 8002e44:	20000290 	.word	0x20000290

08002e48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b02      	ldr	r3, [pc, #8]	; (8002e58 <HAL_GetTick+0x10>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	20000290 	.word	0x20000290

08002e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e64:	f7ff fff0 	bl	8002e48 <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d005      	beq.n	8002e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_Delay+0x44>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e82:	bf00      	nop
 8002e84:	f7ff ffe0 	bl	8002e48 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d8f7      	bhi.n	8002e84 <HAL_Delay+0x28>
  {
  }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000008 	.word	0x20000008

08002ea4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0be      	b.n	8003044 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff fd40 	bl	8002968 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f9ab 	bl	8003244 <ADC_ConversionStop_Disable>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 8099 	bne.w	8003032 <HAL_ADC_Init+0x18e>
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 8095 	bne.w	8003032 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f10:	f023 0302 	bic.w	r3, r3, #2
 8002f14:	f043 0202 	orr.w	r2, r3, #2
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7b1b      	ldrb	r3, [r3, #12]
 8002f2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3c:	d003      	beq.n	8002f46 <HAL_ADC_Init+0xa2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d102      	bne.n	8002f4c <HAL_ADC_Init+0xa8>
 8002f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f4a:	e000      	b.n	8002f4e <HAL_ADC_Init+0xaa>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7d1b      	ldrb	r3, [r3, #20]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d119      	bne.n	8002f90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7b1b      	ldrb	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	035a      	lsls	r2, r3, #13
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	e00b      	b.n	8002f90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_ADC_Init+0x1a8>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc0:	d003      	beq.n	8002fca <HAL_ADC_Init+0x126>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d104      	bne.n	8002fd4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	051b      	lsls	r3, r3, #20
 8002fd2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	4b18      	ldr	r3, [pc, #96]	; (8003050 <HAL_ADC_Init+0x1ac>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d10b      	bne.n	8003010 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800300e:	e018      	b.n	8003042 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	f023 0312 	bic.w	r3, r3, #18
 8003018:	f043 0210 	orr.w	r2, r3, #16
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003030:	e007      	b.n	8003042 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	f043 0210 	orr.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	ffe1f7fd 	.word	0xffe1f7fd
 8003050:	ff1f0efe 	.word	0xff1f0efe

08003054 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x20>
 8003070:	2302      	movs	r3, #2
 8003072:	e0dc      	b.n	800322e <HAL_ADC_ConfigChannel+0x1da>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b06      	cmp	r3, #6
 8003082:	d81c      	bhi.n	80030be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	3b05      	subs	r3, #5
 8003096:	221f      	movs	r2, #31
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	4019      	ands	r1, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	3b05      	subs	r3, #5
 80030b0:	fa00 f203 	lsl.w	r2, r0, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	635a      	str	r2, [r3, #52]	; 0x34
 80030bc:	e03c      	b.n	8003138 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b0c      	cmp	r3, #12
 80030c4:	d81c      	bhi.n	8003100 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	3b23      	subs	r3, #35	; 0x23
 80030d8:	221f      	movs	r2, #31
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	4019      	ands	r1, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	3b23      	subs	r3, #35	; 0x23
 80030f2:	fa00 f203 	lsl.w	r2, r0, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
 80030fe:	e01b      	b.n	8003138 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	3b41      	subs	r3, #65	; 0x41
 8003112:	221f      	movs	r2, #31
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	4019      	ands	r1, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	3b41      	subs	r3, #65	; 0x41
 800312c:	fa00 f203 	lsl.w	r2, r0, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b09      	cmp	r3, #9
 800313e:	d91c      	bls.n	800317a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68d9      	ldr	r1, [r3, #12]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	3b1e      	subs	r3, #30
 8003152:	2207      	movs	r2, #7
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	4019      	ands	r1, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6898      	ldr	r0, [r3, #8]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	3b1e      	subs	r3, #30
 800316c:	fa00 f203 	lsl.w	r2, r0, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]
 8003178:	e019      	b.n	80031ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6919      	ldr	r1, [r3, #16]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	2207      	movs	r2, #7
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	4019      	ands	r1, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6898      	ldr	r0, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	fa00 f203 	lsl.w	r2, r0, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d003      	beq.n	80031be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031ba:	2b11      	cmp	r3, #17
 80031bc:	d132      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <HAL_ADC_ConfigChannel+0x1e4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d125      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d126      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d11a      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_ADC_ConfigChannel+0x1e8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_ADC_ConfigChannel+0x1ec>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0c9a      	lsrs	r2, r3, #18
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003204:	e002      	b.n	800320c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f9      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x1b2>
 8003212:	e007      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	40012400 	.word	0x40012400
 800323c:	20000000 	.word	0x20000000
 8003240:	431bde83 	.word	0x431bde83

08003244 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d12e      	bne.n	80032bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800326e:	f7ff fdeb 	bl	8002e48 <HAL_GetTick>
 8003272:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003274:	e01b      	b.n	80032ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003276:	f7ff fde7 	bl	8002e48 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d914      	bls.n	80032ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d10d      	bne.n	80032ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f043 0210 	orr.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e007      	b.n	80032be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d0dc      	beq.n	8003276 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fa:	4a04      	ldr	r2, [pc, #16]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	60d3      	str	r3, [r2, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__NVIC_GetPriorityGrouping+0x18>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	f003 0307 	and.w	r3, r3, #7
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	2b00      	cmp	r3, #0
 800333c:	db0b      	blt.n	8003356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	f003 021f 	and.w	r2, r3, #31
 8003344:	4906      	ldr	r1, [pc, #24]	; (8003360 <__NVIC_EnableIRQ+0x34>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2001      	movs	r0, #1
 800334e:	fa00 f202 	lsl.w	r2, r0, r2
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	db0a      	blt.n	800338e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	490c      	ldr	r1, [pc, #48]	; (80033b0 <__NVIC_SetPriority+0x4c>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	440b      	add	r3, r1
 8003388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800338c:	e00a      	b.n	80033a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <__NVIC_SetPriority+0x50>)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3b04      	subs	r3, #4
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	761a      	strb	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1c3 0307 	rsb	r3, r3, #7
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf28      	it	cs
 80033d6:	2304      	movcs	r3, #4
 80033d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3304      	adds	r3, #4
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d902      	bls.n	80033e8 <NVIC_EncodePriority+0x30>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b03      	subs	r3, #3
 80033e6:	e000      	b.n	80033ea <NVIC_EncodePriority+0x32>
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 31ff 	mov.w	r1, #4294967295
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43d9      	mvns	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	4313      	orrs	r3, r2
         );
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342c:	d301      	bcc.n	8003432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342e:	2301      	movs	r3, #1
 8003430:	e00f      	b.n	8003452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <SysTick_Config+0x40>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343a:	210f      	movs	r1, #15
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	f7ff ff90 	bl	8003364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <SysTick_Config+0x40>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <SysTick_Config+0x40>)
 800344c:	2207      	movs	r2, #7
 800344e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	e000e010 	.word	0xe000e010

08003460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff2d 	bl	80032c8 <__NVIC_SetPriorityGrouping>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003488:	f7ff ff42 	bl	8003310 <__NVIC_GetPriorityGrouping>
 800348c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff90 	bl	80033b8 <NVIC_EncodePriority>
 8003498:	4602      	mov	r2, r0
 800349a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff5f 	bl	8003364 <__NVIC_SetPriority>
}
 80034a6:	bf00      	nop
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff35 	bl	800332c <__NVIC_EnableIRQ>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ffa2 	bl	800341c <SysTick_Config>
 80034d8:	4603      	mov	r3, r0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d008      	beq.n	800350c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2204      	movs	r2, #4
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e020      	b.n	800354e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 020e 	bic.w	r2, r2, #14
 800351a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d005      	beq.n	800357c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2204      	movs	r2, #4
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e051      	b.n	8003620 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 020e 	bic.w	r2, r2, #14
 800358a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a22      	ldr	r2, [pc, #136]	; (800362c <HAL_DMA_Abort_IT+0xd4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d029      	beq.n	80035fa <HAL_DMA_Abort_IT+0xa2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a21      	ldr	r2, [pc, #132]	; (8003630 <HAL_DMA_Abort_IT+0xd8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x9e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <HAL_DMA_Abort_IT+0xdc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01a      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x98>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <HAL_DMA_Abort_IT+0xe0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d012      	beq.n	80035ea <HAL_DMA_Abort_IT+0x92>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_DMA_Abort_IT+0xe4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00a      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x8c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_DMA_Abort_IT+0xe8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d102      	bne.n	80035de <HAL_DMA_Abort_IT+0x86>
 80035d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035dc:	e00e      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035e2:	e00b      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e8:	e008      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ee:	e005      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f4:	e002      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035f6:	2310      	movs	r3, #16
 80035f8:	e000      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4a11      	ldr	r2, [pc, #68]	; (8003644 <HAL_DMA_Abort_IT+0xec>)
 80035fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
    } 
  }
  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40020008 	.word	0x40020008
 8003630:	4002001c 	.word	0x4002001c
 8003634:	40020030 	.word	0x40020030
 8003638:	40020044 	.word	0x40020044
 800363c:	40020058 	.word	0x40020058
 8003640:	4002006c 	.word	0x4002006c
 8003644:	40020000 	.word	0x40020000

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b480      	push	{r7}
 800364a:	b08b      	sub	sp, #44	; 0x2c
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365a:	e169      	b.n	8003930 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800365c:	2201      	movs	r2, #1
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	429a      	cmp	r2, r3
 8003676:	f040 8158 	bne.w	800392a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4a9a      	ldr	r2, [pc, #616]	; (80038e8 <HAL_GPIO_Init+0x2a0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d05e      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 8003684:	4a98      	ldr	r2, [pc, #608]	; (80038e8 <HAL_GPIO_Init+0x2a0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d875      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 800368a:	4a98      	ldr	r2, [pc, #608]	; (80038ec <HAL_GPIO_Init+0x2a4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d058      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 8003690:	4a96      	ldr	r2, [pc, #600]	; (80038ec <HAL_GPIO_Init+0x2a4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d86f      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 8003696:	4a96      	ldr	r2, [pc, #600]	; (80038f0 <HAL_GPIO_Init+0x2a8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d052      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 800369c:	4a94      	ldr	r2, [pc, #592]	; (80038f0 <HAL_GPIO_Init+0x2a8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d869      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 80036a2:	4a94      	ldr	r2, [pc, #592]	; (80038f4 <HAL_GPIO_Init+0x2ac>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d04c      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 80036a8:	4a92      	ldr	r2, [pc, #584]	; (80038f4 <HAL_GPIO_Init+0x2ac>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d863      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 80036ae:	4a92      	ldr	r2, [pc, #584]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d046      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 80036b4:	4a90      	ldr	r2, [pc, #576]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d85d      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d82a      	bhi.n	8003714 <HAL_GPIO_Init+0xcc>
 80036be:	2b12      	cmp	r3, #18
 80036c0:	d859      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <HAL_GPIO_Init+0x80>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	08003743 	.word	0x08003743
 80036cc:	0800371d 	.word	0x0800371d
 80036d0:	0800372f 	.word	0x0800372f
 80036d4:	08003771 	.word	0x08003771
 80036d8:	08003777 	.word	0x08003777
 80036dc:	08003777 	.word	0x08003777
 80036e0:	08003777 	.word	0x08003777
 80036e4:	08003777 	.word	0x08003777
 80036e8:	08003777 	.word	0x08003777
 80036ec:	08003777 	.word	0x08003777
 80036f0:	08003777 	.word	0x08003777
 80036f4:	08003777 	.word	0x08003777
 80036f8:	08003777 	.word	0x08003777
 80036fc:	08003777 	.word	0x08003777
 8003700:	08003777 	.word	0x08003777
 8003704:	08003777 	.word	0x08003777
 8003708:	08003777 	.word	0x08003777
 800370c:	08003725 	.word	0x08003725
 8003710:	08003739 	.word	0x08003739
 8003714:	4a79      	ldr	r2, [pc, #484]	; (80038fc <HAL_GPIO_Init+0x2b4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800371a:	e02c      	b.n	8003776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	623b      	str	r3, [r7, #32]
          break;
 8003722:	e029      	b.n	8003778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	3304      	adds	r3, #4
 800372a:	623b      	str	r3, [r7, #32]
          break;
 800372c:	e024      	b.n	8003778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	3308      	adds	r3, #8
 8003734:	623b      	str	r3, [r7, #32]
          break;
 8003736:	e01f      	b.n	8003778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	330c      	adds	r3, #12
 800373e:	623b      	str	r3, [r7, #32]
          break;
 8003740:	e01a      	b.n	8003778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800374a:	2304      	movs	r3, #4
 800374c:	623b      	str	r3, [r7, #32]
          break;
 800374e:	e013      	b.n	8003778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003758:	2308      	movs	r3, #8
 800375a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	611a      	str	r2, [r3, #16]
          break;
 8003762:	e009      	b.n	8003778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003764:	2308      	movs	r3, #8
 8003766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	615a      	str	r2, [r3, #20]
          break;
 800376e:	e003      	b.n	8003778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]
          break;
 8003774:	e000      	b.n	8003778 <HAL_GPIO_Init+0x130>
          break;
 8003776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2bff      	cmp	r3, #255	; 0xff
 800377c:	d801      	bhi.n	8003782 <HAL_GPIO_Init+0x13a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	e001      	b.n	8003786 <HAL_GPIO_Init+0x13e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2bff      	cmp	r3, #255	; 0xff
 800378c:	d802      	bhi.n	8003794 <HAL_GPIO_Init+0x14c>
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	e002      	b.n	800379a <HAL_GPIO_Init+0x152>
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	3b08      	subs	r3, #8
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	210f      	movs	r1, #15
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	6a39      	ldr	r1, [r7, #32]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	431a      	orrs	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80b1 	beq.w	800392a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037c8:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	4a4c      	ldr	r2, [pc, #304]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6193      	str	r3, [r2, #24]
 80037d4:	4b4a      	ldr	r3, [pc, #296]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037e0:	4a48      	ldr	r2, [pc, #288]	; (8003904 <HAL_GPIO_Init+0x2bc>)
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a40      	ldr	r2, [pc, #256]	; (8003908 <HAL_GPIO_Init+0x2c0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <HAL_GPIO_Init+0x1ec>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3f      	ldr	r2, [pc, #252]	; (800390c <HAL_GPIO_Init+0x2c4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00d      	beq.n	8003830 <HAL_GPIO_Init+0x1e8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3e      	ldr	r2, [pc, #248]	; (8003910 <HAL_GPIO_Init+0x2c8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <HAL_GPIO_Init+0x1e4>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3d      	ldr	r2, [pc, #244]	; (8003914 <HAL_GPIO_Init+0x2cc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <HAL_GPIO_Init+0x1e0>
 8003824:	2303      	movs	r3, #3
 8003826:	e006      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003828:	2304      	movs	r3, #4
 800382a:	e004      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 800382c:	2302      	movs	r3, #2
 800382e:	e002      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003834:	2300      	movs	r3, #0
 8003836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003838:	f002 0203 	and.w	r2, r2, #3
 800383c:	0092      	lsls	r2, r2, #2
 800383e:	4093      	lsls	r3, r2
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003846:	492f      	ldr	r1, [pc, #188]	; (8003904 <HAL_GPIO_Init+0x2bc>)
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	3302      	adds	r3, #2
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d006      	beq.n	800386e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003860:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	492c      	ldr	r1, [pc, #176]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]
 800386c:	e006      	b.n	800387c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800386e:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	43db      	mvns	r3, r3
 8003876:	4928      	ldr	r1, [pc, #160]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 8003878:	4013      	ands	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003888:	4b23      	ldr	r3, [pc, #140]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	4922      	ldr	r1, [pc, #136]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	60cb      	str	r3, [r1, #12]
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003896:	4b20      	ldr	r3, [pc, #128]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	43db      	mvns	r3, r3
 800389e:	491e      	ldr	r1, [pc, #120]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4918      	ldr	r1, [pc, #96]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	e006      	b.n	80038cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	4914      	ldr	r1, [pc, #80]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d021      	beq.n	800391c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	490e      	ldr	r1, [pc, #56]	; (8003918 <HAL_GPIO_Init+0x2d0>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e021      	b.n	800392a <HAL_GPIO_Init+0x2e2>
 80038e6:	bf00      	nop
 80038e8:	10320000 	.word	0x10320000
 80038ec:	10310000 	.word	0x10310000
 80038f0:	10220000 	.word	0x10220000
 80038f4:	10210000 	.word	0x10210000
 80038f8:	10120000 	.word	0x10120000
 80038fc:	10110000 	.word	0x10110000
 8003900:	40021000 	.word	0x40021000
 8003904:	40010000 	.word	0x40010000
 8003908:	40010800 	.word	0x40010800
 800390c:	40010c00 	.word	0x40010c00
 8003910:	40011000 	.word	0x40011000
 8003914:	40011400 	.word	0x40011400
 8003918:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_GPIO_Init+0x304>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	43db      	mvns	r3, r3
 8003924:	4909      	ldr	r1, [pc, #36]	; (800394c <HAL_GPIO_Init+0x304>)
 8003926:	4013      	ands	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	3301      	adds	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	f47f ae8e 	bne.w	800365c <HAL_GPIO_Init+0x14>
  }
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	372c      	adds	r7, #44	; 0x2c
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40010400 	.word	0x40010400

08003950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	e001      	b.n	8003972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	807b      	strh	r3, [r7, #2]
 800398a:	4613      	mov	r3, r2
 800398c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800398e:	787b      	ldrb	r3, [r7, #1]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003994:	887a      	ldrh	r2, [r7, #2]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800399a:	e003      	b.n	80039a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800399c:	887b      	ldrh	r3, [r7, #2]
 800399e:	041a      	lsls	r2, r3, #16
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	611a      	str	r2, [r3, #16]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
	...

080039b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d006      	beq.n	80039d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039c6:	4a05      	ldr	r2, [pc, #20]	; (80039dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe ff5c 	bl	800288c <HAL_GPIO_EXTI_Callback>
  }
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40010400 	.word	0x40010400

080039e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e272      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8087 	beq.w	8003b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a00:	4b92      	ldr	r3, [pc, #584]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d00c      	beq.n	8003a26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a0c:	4b8f      	ldr	r3, [pc, #572]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d112      	bne.n	8003a3e <HAL_RCC_OscConfig+0x5e>
 8003a18:	4b8c      	ldr	r3, [pc, #560]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a24:	d10b      	bne.n	8003a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a26:	4b89      	ldr	r3, [pc, #548]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d06c      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d168      	bne.n	8003b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e24c      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a46:	d106      	bne.n	8003a56 <HAL_RCC_OscConfig+0x76>
 8003a48:	4b80      	ldr	r3, [pc, #512]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	e02e      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd4>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x98>
 8003a5e:	4b7b      	ldr	r3, [pc, #492]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7a      	ldr	r2, [pc, #488]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b78      	ldr	r3, [pc, #480]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a77      	ldr	r2, [pc, #476]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e01d      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd4>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0xbc>
 8003a82:	4b72      	ldr	r3, [pc, #456]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a71      	ldr	r2, [pc, #452]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b6f      	ldr	r3, [pc, #444]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6e      	ldr	r2, [pc, #440]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd4>
 8003a9c:	4b6b      	ldr	r3, [pc, #428]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a6a      	ldr	r2, [pc, #424]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b68      	ldr	r3, [pc, #416]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a67      	ldr	r2, [pc, #412]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7ff f9c4 	bl	8002e48 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7ff f9c0 	bl	8002e48 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e200      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b5d      	ldr	r3, [pc, #372]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xe4>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7ff f9b0 	bl	8002e48 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7ff f9ac 	bl	8002e48 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e1ec      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x10c>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d063      	beq.n	8003be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b1a:	4b4c      	ldr	r3, [pc, #304]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b26:	4b49      	ldr	r3, [pc, #292]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d11c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x18c>
 8003b32:	4b46      	ldr	r3, [pc, #280]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d116      	bne.n	8003b6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	4b43      	ldr	r3, [pc, #268]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_RCC_OscConfig+0x176>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d001      	beq.n	8003b56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e1c0      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b56:	4b3d      	ldr	r3, [pc, #244]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4939      	ldr	r1, [pc, #228]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6a:	e03a      	b.n	8003be2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b74:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <HAL_RCC_OscConfig+0x270>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7ff f965 	bl	8002e48 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b82:	f7ff f961 	bl	8002e48 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e1a1      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4927      	ldr	r1, [pc, #156]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
 8003bb4:	e015      	b.n	8003be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7ff f944 	bl	8002e48 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc4:	f7ff f940 	bl	8002e48 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e180      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d03a      	beq.n	8003c64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d019      	beq.n	8003c2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf6:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <HAL_RCC_OscConfig+0x274>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfc:	f7ff f924 	bl	8002e48 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c04:	f7ff f920 	bl	8002e48 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e160      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <HAL_RCC_OscConfig+0x26c>)
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f000 face 	bl	80041c4 <RCC_Delay>
 8003c28:	e01c      	b.n	8003c64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c30:	f7ff f90a 	bl	8002e48 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c36:	e00f      	b.n	8003c58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c38:	f7ff f906 	bl	8002e48 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d908      	bls.n	8003c58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e146      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	42420000 	.word	0x42420000
 8003c54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	4b92      	ldr	r3, [pc, #584]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e9      	bne.n	8003c38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a6 	beq.w	8003dbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c76:	4b8b      	ldr	r3, [pc, #556]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10d      	bne.n	8003c9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	4b88      	ldr	r3, [pc, #544]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4a87      	ldr	r2, [pc, #540]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	61d3      	str	r3, [r2, #28]
 8003c8e:	4b85      	ldr	r3, [pc, #532]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b82      	ldr	r3, [pc, #520]	; (8003ea8 <HAL_RCC_OscConfig+0x4c8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003caa:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <HAL_RCC_OscConfig+0x4c8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a7e      	ldr	r2, [pc, #504]	; (8003ea8 <HAL_RCC_OscConfig+0x4c8>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7ff f8c7 	bl	8002e48 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7ff f8c3 	bl	8002e48 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b64      	cmp	r3, #100	; 0x64
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e103      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b75      	ldr	r3, [pc, #468]	; (8003ea8 <HAL_RCC_OscConfig+0x4c8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d106      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x312>
 8003ce4:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4a6e      	ldr	r2, [pc, #440]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6213      	str	r3, [r2, #32]
 8003cf0:	e02d      	b.n	8003d4e <HAL_RCC_OscConfig+0x36e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x334>
 8003cfa:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4a69      	ldr	r2, [pc, #420]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	6213      	str	r3, [r2, #32]
 8003d06:	4b67      	ldr	r3, [pc, #412]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	4a66      	ldr	r2, [pc, #408]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	6213      	str	r3, [r2, #32]
 8003d12:	e01c      	b.n	8003d4e <HAL_RCC_OscConfig+0x36e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d10c      	bne.n	8003d36 <HAL_RCC_OscConfig+0x356>
 8003d1c:	4b61      	ldr	r3, [pc, #388]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4a60      	ldr	r2, [pc, #384]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	f043 0304 	orr.w	r3, r3, #4
 8003d26:	6213      	str	r3, [r2, #32]
 8003d28:	4b5e      	ldr	r3, [pc, #376]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	4a5d      	ldr	r2, [pc, #372]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6213      	str	r3, [r2, #32]
 8003d34:	e00b      	b.n	8003d4e <HAL_RCC_OscConfig+0x36e>
 8003d36:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	4a5a      	ldr	r2, [pc, #360]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	6213      	str	r3, [r2, #32]
 8003d42:	4b58      	ldr	r3, [pc, #352]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4a57      	ldr	r2, [pc, #348]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	f023 0304 	bic.w	r3, r3, #4
 8003d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d015      	beq.n	8003d82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7ff f877 	bl	8002e48 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7ff f873 	bl	8002e48 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e0b1      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d74:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0ee      	beq.n	8003d5e <HAL_RCC_OscConfig+0x37e>
 8003d80:	e014      	b.n	8003dac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d82:	f7ff f861 	bl	8002e48 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d88:	e00a      	b.n	8003da0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8a:	f7ff f85d 	bl	8002e48 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e09b      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ee      	bne.n	8003d8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d105      	bne.n	8003dbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db2:	4b3c      	ldr	r3, [pc, #240]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4a3b      	ldr	r2, [pc, #236]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8087 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d061      	beq.n	8003e98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d146      	bne.n	8003e6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ddc:	4b33      	ldr	r3, [pc, #204]	; (8003eac <HAL_RCC_OscConfig+0x4cc>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7ff f831 	bl	8002e48 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dea:	f7ff f82d 	bl	8002e48 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e06d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfc:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f0      	bne.n	8003dea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e10:	d108      	bne.n	8003e24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4921      	ldr	r1, [pc, #132]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e24:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a19      	ldr	r1, [r3, #32]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	430b      	orrs	r3, r1
 8003e36:	491b      	ldr	r1, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCC_OscConfig+0x4cc>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7ff f801 	bl	8002e48 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fe fffd 	bl	8002e48 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e03d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x46a>
 8003e68:	e035      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_RCC_OscConfig+0x4cc>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fe ffea 	bl	8002e48 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fe ffe6 	bl	8002e48 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e026      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x498>
 8003e96:	e01e      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e019      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_OscConfig+0x500>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000

08003ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0d0      	b.n	800409a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b6a      	ldr	r3, [pc, #424]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d910      	bls.n	8003f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b67      	ldr	r3, [pc, #412]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 0207 	bic.w	r2, r3, #7
 8003f0e:	4965      	ldr	r1, [pc, #404]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0b8      	b.n	800409a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f40:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a58      	ldr	r2, [pc, #352]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f58:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a52      	ldr	r2, [pc, #328]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	494d      	ldr	r1, [pc, #308]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d040      	beq.n	8004004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d115      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e07f      	b.n	800409a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e073      	b.n	800409a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb2:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e06b      	b.n	800409a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc2:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f023 0203 	bic.w	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4936      	ldr	r1, [pc, #216]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fd4:	f7fe ff38 	bl	8002e48 <HAL_GetTick>
 8003fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fdc:	f7fe ff34 	bl	8002e48 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e053      	b.n	800409a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 020c 	and.w	r2, r3, #12
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	429a      	cmp	r2, r3
 8004002:	d1eb      	bne.n	8003fdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004004:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d210      	bcs.n	8004034 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 0207 	bic.w	r2, r3, #7
 800401a:	4922      	ldr	r1, [pc, #136]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	4313      	orrs	r3, r2
 8004020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e032      	b.n	800409a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4916      	ldr	r1, [pc, #88]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	490e      	ldr	r1, [pc, #56]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	4313      	orrs	r3, r2
 8004070:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004072:	f000 f821 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8004076:	4602      	mov	r2, r0
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	490a      	ldr	r1, [pc, #40]	; (80040ac <HAL_RCC_ClockConfig+0x1c8>)
 8004084:	5ccb      	ldrb	r3, [r1, r3]
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <HAL_RCC_ClockConfig+0x1cc>)
 800408c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fe96 	bl	8002dc4 <HAL_InitTick>

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40022000 	.word	0x40022000
 80040a8:	40021000 	.word	0x40021000
 80040ac:	08006758 	.word	0x08006758
 80040b0:	20000000 	.word	0x20000000
 80040b4:	20000004 	.word	0x20000004

080040b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040d2:	4b1e      	ldr	r3, [pc, #120]	; (800414c <HAL_RCC_GetSysClockFreq+0x94>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d002      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x30>
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d003      	beq.n	80040ee <HAL_RCC_GetSysClockFreq+0x36>
 80040e6:	e027      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ea:	613b      	str	r3, [r7, #16]
      break;
 80040ec:	e027      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	0c9b      	lsrs	r3, r3, #18
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	4a17      	ldr	r2, [pc, #92]	; (8004154 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040f8:	5cd3      	ldrb	r3, [r2, r3]
 80040fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d010      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004106:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCC_GetSysClockFreq+0x94>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	0c5b      	lsrs	r3, r3, #17
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	4a11      	ldr	r2, [pc, #68]	; (8004158 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004112:	5cd3      	ldrb	r3, [r2, r3]
 8004114:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <HAL_RCC_GetSysClockFreq+0x98>)
 800411a:	fb03 f202 	mul.w	r2, r3, r2
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	fbb2 f3f3 	udiv	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	e004      	b.n	8004132 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a0c      	ldr	r2, [pc, #48]	; (800415c <HAL_RCC_GetSysClockFreq+0xa4>)
 800412c:	fb02 f303 	mul.w	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	613b      	str	r3, [r7, #16]
      break;
 8004136:	e002      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetSysClockFreq+0x98>)
 800413a:	613b      	str	r3, [r7, #16]
      break;
 800413c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413e:	693b      	ldr	r3, [r7, #16]
}
 8004140:	4618      	mov	r0, r3
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
 8004150:	007a1200 	.word	0x007a1200
 8004154:	08006770 	.word	0x08006770
 8004158:	08006780 	.word	0x08006780
 800415c:	003d0900 	.word	0x003d0900

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004164:	4b02      	ldr	r3, [pc, #8]	; (8004170 <HAL_RCC_GetHCLKFreq+0x10>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	20000000 	.word	0x20000000

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004178:	f7ff fff2 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	08006768 	.word	0x08006768

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041a0:	f7ff ffde 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	0adb      	lsrs	r3, r3, #11
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	08006768 	.word	0x08006768

080041c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <RCC_Delay+0x34>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <RCC_Delay+0x38>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	0a5b      	lsrs	r3, r3, #9
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041e0:	bf00      	nop
  }
  while (Delay --);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	60fa      	str	r2, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f9      	bne.n	80041e0 <RCC_Delay+0x1c>
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	20000000 	.word	0x20000000
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d07d      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004220:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b4c      	ldr	r3, [pc, #304]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4a4b      	ldr	r2, [pc, #300]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	61d3      	str	r3, [r2, #28]
 8004238:	4b49      	ldr	r3, [pc, #292]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b46      	ldr	r3, [pc, #280]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d118      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004254:	4b43      	ldr	r3, [pc, #268]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a42      	ldr	r2, [pc, #264]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800425a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004260:	f7fe fdf2 	bl	8002e48 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	e008      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004268:	f7fe fdee 	bl	8002e48 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e06d      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	4b3a      	ldr	r3, [pc, #232]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02e      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d027      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042a4:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042ba:	4a29      	ldr	r2, [pc, #164]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d014      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fe fdbd 	bl	8002e48 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe fdb9 	bl	8002e48 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e036      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ee      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4917      	ldr	r1, [pc, #92]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	4313      	orrs	r3, r2
 8004304:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4a13      	ldr	r2, [pc, #76]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	490b      	ldr	r1, [pc, #44]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4904      	ldr	r1, [pc, #16]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	40007000 	.word	0x40007000
 8004368:	42420440 	.word	0x42420440

0800436c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e041      	b.n	8004402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f839 	bl	800440a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 fbec 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e041      	b.n	80044b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fe fafc 	bl	8002a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f000 fb94 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d109      	bne.n	80044e0 <HAL_TIM_PWM_Start+0x24>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e022      	b.n	8004526 <HAL_TIM_PWM_Start+0x6a>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d109      	bne.n	80044fa <HAL_TIM_PWM_Start+0x3e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	bf14      	ite	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	2300      	moveq	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e015      	b.n	8004526 <HAL_TIM_PWM_Start+0x6a>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d109      	bne.n	8004514 <HAL_TIM_PWM_Start+0x58>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e008      	b.n	8004526 <HAL_TIM_PWM_Start+0x6a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2300      	moveq	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e05e      	b.n	80045ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Start+0x82>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800453c:	e013      	b.n	8004566 <HAL_TIM_PWM_Start+0xaa>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b04      	cmp	r3, #4
 8004542:	d104      	bne.n	800454e <HAL_TIM_PWM_Start+0x92>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800454c:	e00b      	b.n	8004566 <HAL_TIM_PWM_Start+0xaa>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d104      	bne.n	800455e <HAL_TIM_PWM_Start+0xa2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800455c:	e003      	b.n	8004566 <HAL_TIM_PWM_Start+0xaa>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2201      	movs	r2, #1
 800456c:	6839      	ldr	r1, [r7, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fd8a 	bl	8005088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1e      	ldr	r2, [pc, #120]	; (80045f4 <HAL_TIM_PWM_Start+0x138>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d107      	bne.n	800458e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <HAL_TIM_PWM_Start+0x138>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00e      	beq.n	80045b6 <HAL_TIM_PWM_Start+0xfa>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a0:	d009      	beq.n	80045b6 <HAL_TIM_PWM_Start+0xfa>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <HAL_TIM_PWM_Start+0x13c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_TIM_PWM_Start+0xfa>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a12      	ldr	r2, [pc, #72]	; (80045fc <HAL_TIM_PWM_Start+0x140>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d111      	bne.n	80045da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b06      	cmp	r3, #6
 80045c6:	d010      	beq.n	80045ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d8:	e007      	b.n	80045ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800

08004600 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e093      	b.n	800473c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f88b 	bl	8004744 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004644:	f023 0307 	bic.w	r3, r3, #7
 8004648:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 fa97 	bl	8004b88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004682:	f023 0303 	bic.w	r3, r3, #3
 8004686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	4313      	orrs	r3, r2
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80046a0:	f023 030c 	bic.w	r3, r3, #12
 80046a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	4313      	orrs	r3, r2
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	011a      	lsls	r2, r3, #4
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	031b      	lsls	r3, r3, #12
 80046d0:	4313      	orrs	r3, r2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	4313      	orrs	r3, r2
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004766:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800476e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004776:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800477e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d110      	bne.n	80047a8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d102      	bne.n	8004792 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800478c:	7b7b      	ldrb	r3, [r7, #13]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d001      	beq.n	8004796 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e069      	b.n	800486a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a6:	e031      	b.n	800480c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d110      	bne.n	80047d0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ae:	7bbb      	ldrb	r3, [r7, #14]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d102      	bne.n	80047ba <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047b4:	7b3b      	ldrb	r3, [r7, #12]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e055      	b.n	800486a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ce:	e01d      	b.n	800480c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d108      	bne.n	80047e8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d6:	7bbb      	ldrb	r3, [r7, #14]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d105      	bne.n	80047e8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047dc:	7b7b      	ldrb	r3, [r7, #13]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d102      	bne.n	80047e8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047e2:	7b3b      	ldrb	r3, [r7, #12]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d001      	beq.n	80047ec <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e03e      	b.n	800486a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_Encoder_Start+0xc4>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d008      	beq.n	800482a <HAL_TIM_Encoder_Start+0xd4>
 8004818:	e00f      	b.n	800483a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2201      	movs	r2, #1
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fc30 	bl	8005088 <TIM_CCxChannelCmd>
      break;
 8004828:	e016      	b.n	8004858 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	2104      	movs	r1, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fc28 	bl	8005088 <TIM_CCxChannelCmd>
      break;
 8004838:	e00e      	b.n	8004858 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2201      	movs	r2, #1
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fc20 	bl	8005088 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2201      	movs	r2, #1
 800484e:	2104      	movs	r1, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fc19 	bl	8005088 <TIM_CCxChannelCmd>
      break;
 8004856:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800488e:	2302      	movs	r3, #2
 8004890:	e0ae      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b0c      	cmp	r3, #12
 800489e:	f200 809f 	bhi.w	80049e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048dd 	.word	0x080048dd
 80048ac:	080049e1 	.word	0x080049e1
 80048b0:	080049e1 	.word	0x080049e1
 80048b4:	080049e1 	.word	0x080049e1
 80048b8:	0800491d 	.word	0x0800491d
 80048bc:	080049e1 	.word	0x080049e1
 80048c0:	080049e1 	.word	0x080049e1
 80048c4:	080049e1 	.word	0x080049e1
 80048c8:	0800495f 	.word	0x0800495f
 80048cc:	080049e1 	.word	0x080049e1
 80048d0:	080049e1 	.word	0x080049e1
 80048d4:	080049e1 	.word	0x080049e1
 80048d8:	0800499f 	.word	0x0800499f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f9b2 	bl	8004c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0208 	orr.w	r2, r2, #8
 80048f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0204 	bic.w	r2, r2, #4
 8004906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6999      	ldr	r1, [r3, #24]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	619a      	str	r2, [r3, #24]
      break;
 800491a:	e064      	b.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f9f8 	bl	8004d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6999      	ldr	r1, [r3, #24]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	021a      	lsls	r2, r3, #8
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	619a      	str	r2, [r3, #24]
      break;
 800495c:	e043      	b.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fa41 	bl	8004dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0208 	orr.w	r2, r2, #8
 8004978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0204 	bic.w	r2, r2, #4
 8004988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69d9      	ldr	r1, [r3, #28]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	61da      	str	r2, [r3, #28]
      break;
 800499c:	e023      	b.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fa8b 	bl	8004ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69d9      	ldr	r1, [r3, #28]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	021a      	lsls	r2, r3, #8
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	61da      	str	r2, [r3, #28]
      break;
 80049de:	e002      	b.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	75fb      	strb	r3, [r7, #23]
      break;
 80049e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIM_ConfigClockSource+0x1c>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e0b4      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x186>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4c:	d03e      	beq.n	8004acc <HAL_TIM_ConfigClockSource+0xd4>
 8004a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a52:	f200 8087 	bhi.w	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5a:	f000 8086 	beq.w	8004b6a <HAL_TIM_ConfigClockSource+0x172>
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a62:	d87f      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a64:	2b70      	cmp	r3, #112	; 0x70
 8004a66:	d01a      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0xa6>
 8004a68:	2b70      	cmp	r3, #112	; 0x70
 8004a6a:	d87b      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a6c:	2b60      	cmp	r3, #96	; 0x60
 8004a6e:	d050      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x11a>
 8004a70:	2b60      	cmp	r3, #96	; 0x60
 8004a72:	d877      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a74:	2b50      	cmp	r3, #80	; 0x50
 8004a76:	d03c      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0xfa>
 8004a78:	2b50      	cmp	r3, #80	; 0x50
 8004a7a:	d873      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d058      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0x13a>
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d86f      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a84:	2b30      	cmp	r3, #48	; 0x30
 8004a86:	d064      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x15a>
 8004a88:	2b30      	cmp	r3, #48	; 0x30
 8004a8a:	d86b      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d060      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x15a>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d867      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d05c      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x15a>
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d05a      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	e062      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6899      	ldr	r1, [r3, #8]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f000 facc 	bl	800504a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	609a      	str	r2, [r3, #8]
      break;
 8004aca:	e04f      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6899      	ldr	r1, [r3, #8]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f000 fab5 	bl	800504a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aee:	609a      	str	r2, [r3, #8]
      break;
 8004af0:	e03c      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f000 fa2c 	bl	8004f5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2150      	movs	r1, #80	; 0x50
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fa83 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004b10:	e02c      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6859      	ldr	r1, [r3, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f000 fa4a 	bl	8004fb8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2160      	movs	r1, #96	; 0x60
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fa73 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004b30:	e01c      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 fa0c 	bl	8004f5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2140      	movs	r1, #64	; 0x40
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fa63 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004b50:	e00c      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	f000 fa5a 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004b62:	e003      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      break;
 8004b68:	e000      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a29      	ldr	r2, [pc, #164]	; (8004c40 <TIM_Base_SetConfig+0xb8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_Base_SetConfig+0x30>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba6:	d007      	beq.n	8004bb8 <TIM_Base_SetConfig+0x30>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a26      	ldr	r2, [pc, #152]	; (8004c44 <TIM_Base_SetConfig+0xbc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_Base_SetConfig+0x30>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a25      	ldr	r2, [pc, #148]	; (8004c48 <TIM_Base_SetConfig+0xc0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d108      	bne.n	8004bca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <TIM_Base_SetConfig+0xb8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_Base_SetConfig+0x62>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd8:	d007      	beq.n	8004bea <TIM_Base_SetConfig+0x62>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <TIM_Base_SetConfig+0xbc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_Base_SetConfig+0x62>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <TIM_Base_SetConfig+0xc0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <TIM_Base_SetConfig+0xb8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d103      	bne.n	8004c30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	615a      	str	r2, [r3, #20]
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800

08004c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f023 0201 	bic.w	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 0302 	bic.w	r3, r3, #2
 8004c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a1c      	ldr	r2, [pc, #112]	; (8004d14 <TIM_OC1_SetConfig+0xc8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d10c      	bne.n	8004cc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0308 	bic.w	r3, r3, #8
 8004cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 0304 	bic.w	r3, r3, #4
 8004cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <TIM_OC1_SetConfig+0xc8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d111      	bne.n	8004cee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00

08004d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f023 0210 	bic.w	r2, r3, #16
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0320 	bic.w	r3, r3, #32
 8004d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <TIM_OC2_SetConfig+0xd0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10d      	bne.n	8004d94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <TIM_OC2_SetConfig+0xd0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d113      	bne.n	8004dc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr
 8004de8:	40012c00 	.word	0x40012c00

08004dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0303 	bic.w	r3, r3, #3
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <TIM_OC3_SetConfig+0xd0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d10d      	bne.n	8004e66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <TIM_OC3_SetConfig+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d113      	bne.n	8004e96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40012c00 	.word	0x40012c00

08004ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	031b      	lsls	r3, r3, #12
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <TIM_OC4_SetConfig+0x98>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d109      	bne.n	8004f34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	019b      	lsls	r3, r3, #6
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	621a      	str	r2, [r3, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	40012c00 	.word	0x40012c00

08004f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 030a 	bic.w	r3, r3, #10
 8004f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f023 0210 	bic.w	r2, r3, #16
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	031b      	lsls	r3, r3, #12
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	621a      	str	r2, [r3, #32]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr

08005016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	f043 0307 	orr.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005064:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	021a      	lsls	r2, r3, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	431a      	orrs	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4313      	orrs	r3, r2
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	609a      	str	r2, [r3, #8]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2201      	movs	r2, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	401a      	ands	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1a      	ldr	r2, [r3, #32]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e046      	b.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a16      	ldr	r2, [pc, #88]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d009      	beq.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a12      	ldr	r2, [pc, #72]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a10      	ldr	r2, [pc, #64]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d10c      	bne.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	4313      	orrs	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800

0800518c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e03d      	b.n	8005224 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e042      	b.n	80052c6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fd fc8b 	bl	8002b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2224      	movs	r2, #36	; 0x24
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005270:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fcd4 	bl	8005c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005286:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695a      	ldr	r2, [r3, #20]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005296:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	4613      	mov	r3, r2
 80052da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d112      	bne.n	800530e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_UART_Receive_IT+0x26>
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e00b      	b.n	8005310 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	461a      	mov	r2, r3
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fab6 	bl	8005876 <UART_Start_Receive_IT>
 800530a:	4603      	mov	r3, r0
 800530c:	e000      	b.n	8005310 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b0ba      	sub	sp, #232	; 0xe8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800533e:	2300      	movs	r3, #0
 8005340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005344:	2300      	movs	r3, #0
 8005346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10f      	bne.n	800537e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <HAL_UART_IRQHandler+0x66>
 800536a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb93 	bl	8005aa2 <UART_Receive_IT>
      return;
 800537c:	e25b      	b.n	8005836 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800537e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 80de 	beq.w	8005544 <HAL_UART_IRQHandler+0x22c>
 8005388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005398:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80d1 	beq.w	8005544 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <HAL_UART_IRQHandler+0xae>
 80053ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	f043 0201 	orr.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <HAL_UART_IRQHandler+0xd2>
 80053d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	f043 0202 	orr.w	r2, r3, #2
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <HAL_UART_IRQHandler+0xf6>
 80053f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	f043 0204 	orr.w	r2, r3, #4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d011      	beq.n	800543e <HAL_UART_IRQHandler+0x126>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d105      	bne.n	8005432 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	f043 0208 	orr.w	r2, r3, #8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 81f2 	beq.w	800582c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_UART_IRQHandler+0x14e>
 8005454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fb1e 	bl	8005aa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <HAL_UART_IRQHandler+0x17a>
 800548a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d04f      	beq.n	8005532 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa28 	bl	80058e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d041      	beq.n	800552a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3314      	adds	r3, #20
 80054ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3314      	adds	r3, #20
 80054ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1d9      	bne.n	80054a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d013      	beq.n	8005522 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	4a7e      	ldr	r2, [pc, #504]	; (80056f8 <HAL_UART_IRQHandler+0x3e0>)
 8005500:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe f826 	bl	8003558 <HAL_DMA_Abort_IT>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800551c:	4610      	mov	r0, r2
 800551e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	e00e      	b.n	8005540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f993 	bl	800584e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	e00a      	b.n	8005540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f98f 	bl	800584e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e006      	b.n	8005540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f98b 	bl	800584e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800553e:	e175      	b.n	800582c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005540:	bf00      	nop
    return;
 8005542:	e173      	b.n	800582c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	2b01      	cmp	r3, #1
 800554a:	f040 814f 	bne.w	80057ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8148 	beq.w	80057ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800555c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8141 	beq.w	80057ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80b6 	beq.w	80056fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800559c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8145 	beq.w	8005830 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ae:	429a      	cmp	r2, r3
 80055b0:	f080 813e 	bcs.w	8005830 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	f000 8088 	beq.w	80056d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005600:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800560c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1d9      	bne.n	80055c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3314      	adds	r3, #20
 800561a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3314      	adds	r3, #20
 8005634:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005638:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800563c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005640:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800564a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e1      	bne.n	8005614 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3314      	adds	r3, #20
 8005656:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005666:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005674:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005676:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800567a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e3      	bne.n	8005650 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a8:	f023 0310 	bic.w	r3, r3, #16
 80056ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80056bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e3      	bne.n	8005696 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fd ff05 	bl	80034e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f8b6 	bl	8005860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056f4:	e09c      	b.n	8005830 <HAL_UART_IRQHandler+0x518>
 80056f6:	bf00      	nop
 80056f8:	080059ad 	.word	0x080059ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005704:	b29b      	uxth	r3, r3
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 808e 	beq.w	8005834 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8089 	beq.w	8005834 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005746:	647a      	str	r2, [r7, #68]	; 0x44
 8005748:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800574c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e3      	bne.n	8005722 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3314      	adds	r3, #20
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	623b      	str	r3, [r7, #32]
   return(result);
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3314      	adds	r3, #20
 800577a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800577e:	633a      	str	r2, [r7, #48]	; 0x30
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e3      	bne.n	800575a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0310 	bic.w	r3, r3, #16
 80057b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057c4:	61fa      	str	r2, [r7, #28]
 80057c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	69b9      	ldr	r1, [r7, #24]
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	617b      	str	r3, [r7, #20]
   return(result);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e3      	bne.n	80057a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f83b 	bl	8005860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057ea:	e023      	b.n	8005834 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <HAL_UART_IRQHandler+0x4f4>
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8e5 	bl	80059d4 <UART_Transmit_IT>
    return;
 800580a:	e014      	b.n	8005836 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800580c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00e      	beq.n	8005836 <HAL_UART_IRQHandler+0x51e>
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f924 	bl	8005a72 <UART_EndTransmit_IT>
    return;
 800582a:	e004      	b.n	8005836 <HAL_UART_IRQHandler+0x51e>
    return;
 800582c:	bf00      	nop
 800582e:	e002      	b.n	8005836 <HAL_UART_IRQHandler+0x51e>
      return;
 8005830:	bf00      	nop
 8005832:	e000      	b.n	8005836 <HAL_UART_IRQHandler+0x51e>
      return;
 8005834:	bf00      	nop
  }
}
 8005836:	37e8      	adds	r7, #232	; 0xe8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	4613      	mov	r3, r2
 8005882:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	88fa      	ldrh	r2, [r7, #6]
 8005894:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2222      	movs	r2, #34	; 0x22
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0220 	orr.w	r2, r2, #32
 80058da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b095      	sub	sp, #84	; 0x54
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	330c      	adds	r3, #12
 80058f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	330c      	adds	r3, #12
 800590e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005910:	643a      	str	r2, [r7, #64]	; 0x40
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005918:	e841 2300 	strex	r3, r2, [r1]
 800591c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e5      	bne.n	80058f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3314      	adds	r3, #20
 800592a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	61fb      	str	r3, [r7, #28]
   return(result);
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f023 0301 	bic.w	r3, r3, #1
 800593a:	64bb      	str	r3, [r7, #72]	; 0x48
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3314      	adds	r3, #20
 8005942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800594a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e5      	bne.n	8005924 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	2b01      	cmp	r3, #1
 800595e:	d119      	bne.n	8005994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	647b      	str	r3, [r7, #68]	; 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005980:	61ba      	str	r2, [r7, #24]
 8005982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6979      	ldr	r1, [r7, #20]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	613b      	str	r3, [r7, #16]
   return(result);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059a2:	bf00      	nop
 80059a4:	3754      	adds	r7, #84	; 0x54
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff ff41 	bl	800584e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b21      	cmp	r3, #33	; 0x21
 80059e6:	d13e      	bne.n	8005a66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f0:	d114      	bne.n	8005a1c <UART_Transmit_IT+0x48>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d110      	bne.n	8005a1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	1c9a      	adds	r2, r3, #2
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	621a      	str	r2, [r3, #32]
 8005a1a:	e008      	b.n	8005a2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6211      	str	r1, [r2, #32]
 8005a26:	781a      	ldrb	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10f      	bne.n	8005a62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e000      	b.n	8005a68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a66:	2302      	movs	r3, #2
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fed2 	bl	800583c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b08c      	sub	sp, #48	; 0x30
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b22      	cmp	r3, #34	; 0x22
 8005ab4:	f040 80ae 	bne.w	8005c14 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac0:	d117      	bne.n	8005af2 <UART_Receive_IT+0x50>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	1c9a      	adds	r2, r3, #2
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
 8005af0:	e026      	b.n	8005b40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d007      	beq.n	8005b16 <UART_Receive_IT+0x74>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <UART_Receive_IT+0x82>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e008      	b.n	8005b36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d15d      	bne.n	8005c10 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0220 	bic.w	r2, r2, #32
 8005b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d135      	bne.n	8005c06 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 0310 	bic.w	r3, r3, #16
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc0:	623a      	str	r2, [r7, #32]
 8005bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	69f9      	ldr	r1, [r7, #28]
 8005bc6:	6a3a      	ldr	r2, [r7, #32]
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e5      	bne.n	8005ba0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d10a      	bne.n	8005bf8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fe2e 	bl	8005860 <HAL_UARTEx_RxEventCallback>
 8005c04:	e002      	b.n	8005c0c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fc fe10 	bl	800282c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e002      	b.n	8005c16 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e000      	b.n	8005c16 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
  }
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3730      	adds	r7, #48	; 0x30
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c5a:	f023 030c 	bic.w	r3, r3, #12
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	430b      	orrs	r3, r1
 8005c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2c      	ldr	r2, [pc, #176]	; (8005d34 <UART_SetConfig+0x114>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d103      	bne.n	8005c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c88:	f7fe fa88 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	e002      	b.n	8005c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c90:	f7fe fa70 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8005c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009a      	lsls	r2, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <UART_SetConfig+0x118>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	0119      	lsls	r1, r3, #4
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009a      	lsls	r2, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	; (8005d38 <UART_SetConfig+0x118>)
 8005cce:	fba3 0302 	umull	r0, r3, r3, r2
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2064      	movs	r0, #100	; 0x64
 8005cd6:	fb00 f303 	mul.w	r3, r0, r3
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	3332      	adds	r3, #50	; 0x32
 8005ce0:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <UART_SetConfig+0x118>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cec:	4419      	add	r1, r3
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009a      	lsls	r2, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d04:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <UART_SetConfig+0x118>)
 8005d06:	fba3 0302 	umull	r0, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2064      	movs	r0, #100	; 0x64
 8005d0e:	fb00 f303 	mul.w	r3, r0, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	3332      	adds	r3, #50	; 0x32
 8005d18:	4a07      	ldr	r2, [pc, #28]	; (8005d38 <UART_SetConfig+0x118>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 020f 	and.w	r2, r3, #15
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	440a      	add	r2, r1
 8005d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40013800 	.word	0x40013800
 8005d38:	51eb851f 	.word	0x51eb851f

08005d3c <__errno>:
 8005d3c:	4b01      	ldr	r3, [pc, #4]	; (8005d44 <__errno+0x8>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c

08005d48 <__libc_init_array>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	4d0c      	ldr	r5, [pc, #48]	; (8005d80 <__libc_init_array+0x38>)
 8005d4e:	4c0d      	ldr	r4, [pc, #52]	; (8005d84 <__libc_init_array+0x3c>)
 8005d50:	1b64      	subs	r4, r4, r5
 8005d52:	10a4      	asrs	r4, r4, #2
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	d109      	bne.n	8005d6c <__libc_init_array+0x24>
 8005d58:	f000 fca0 	bl	800669c <_init>
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	4d0a      	ldr	r5, [pc, #40]	; (8005d88 <__libc_init_array+0x40>)
 8005d60:	4c0a      	ldr	r4, [pc, #40]	; (8005d8c <__libc_init_array+0x44>)
 8005d62:	1b64      	subs	r4, r4, r5
 8005d64:	10a4      	asrs	r4, r4, #2
 8005d66:	42a6      	cmp	r6, r4
 8005d68:	d105      	bne.n	8005d76 <__libc_init_array+0x2e>
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d70:	4798      	blx	r3
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7ee      	b.n	8005d54 <__libc_init_array+0xc>
 8005d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7a:	4798      	blx	r3
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7f2      	b.n	8005d66 <__libc_init_array+0x1e>
 8005d80:	08006808 	.word	0x08006808
 8005d84:	08006808 	.word	0x08006808
 8005d88:	08006808 	.word	0x08006808
 8005d8c:	0800680c 	.word	0x0800680c

08005d90 <memcpy>:
 8005d90:	440a      	add	r2, r1
 8005d92:	4291      	cmp	r1, r2
 8005d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d98:	d100      	bne.n	8005d9c <memcpy+0xc>
 8005d9a:	4770      	bx	lr
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da2:	4291      	cmp	r1, r2
 8005da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da8:	d1f9      	bne.n	8005d9e <memcpy+0xe>
 8005daa:	bd10      	pop	{r4, pc}

08005dac <memset>:
 8005dac:	4603      	mov	r3, r0
 8005dae:	4402      	add	r2, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <atan2>:
 8005dbc:	f000 b84c 	b.w	8005e58 <__ieee754_atan2>

08005dc0 <fmod>:
 8005dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	4689      	mov	r9, r1
 8005dc8:	4616      	mov	r6, r2
 8005dca:	461f      	mov	r7, r3
 8005dcc:	f000 f916 	bl	8005ffc <__ieee754_fmod>
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	4640      	mov	r0, r8
 8005dda:	4649      	mov	r1, r9
 8005ddc:	f7fa fe0e 	bl	80009fc <__aeabi_dcmpun>
 8005de0:	b990      	cbnz	r0, 8005e08 <fmod+0x48>
 8005de2:	2200      	movs	r2, #0
 8005de4:	2300      	movs	r3, #0
 8005de6:	4630      	mov	r0, r6
 8005de8:	4639      	mov	r1, r7
 8005dea:	f7fa fdd5 	bl	8000998 <__aeabi_dcmpeq>
 8005dee:	b158      	cbz	r0, 8005e08 <fmod+0x48>
 8005df0:	f7ff ffa4 	bl	8005d3c <__errno>
 8005df4:	2321      	movs	r3, #33	; 0x21
 8005df6:	2200      	movs	r2, #0
 8005df8:	6003      	str	r3, [r0, #0]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f7fa fc8c 	bl	800071c <__aeabi_ddiv>
 8005e04:	4604      	mov	r4, r0
 8005e06:	460d      	mov	r5, r1
 8005e08:	4620      	mov	r0, r4
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005e10 <sqrt>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	4606      	mov	r6, r0
 8005e14:	460f      	mov	r7, r1
 8005e16:	f000 fa01 	bl	800621c <__ieee754_sqrt>
 8005e1a:	4632      	mov	r2, r6
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	460d      	mov	r5, r1
 8005e20:	463b      	mov	r3, r7
 8005e22:	4630      	mov	r0, r6
 8005e24:	4639      	mov	r1, r7
 8005e26:	f7fa fde9 	bl	80009fc <__aeabi_dcmpun>
 8005e2a:	b990      	cbnz	r0, 8005e52 <sqrt+0x42>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2300      	movs	r3, #0
 8005e30:	4630      	mov	r0, r6
 8005e32:	4639      	mov	r1, r7
 8005e34:	f7fa fdba 	bl	80009ac <__aeabi_dcmplt>
 8005e38:	b158      	cbz	r0, 8005e52 <sqrt+0x42>
 8005e3a:	f7ff ff7f 	bl	8005d3c <__errno>
 8005e3e:	2321      	movs	r3, #33	; 0x21
 8005e40:	2200      	movs	r2, #0
 8005e42:	6003      	str	r3, [r0, #0]
 8005e44:	2300      	movs	r3, #0
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f7fa fc67 	bl	800071c <__aeabi_ddiv>
 8005e4e:	4604      	mov	r4, r0
 8005e50:	460d      	mov	r5, r1
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e58 <__ieee754_atan2>:
 8005e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	4692      	mov	sl, r2
 8005e5e:	4699      	mov	r9, r3
 8005e60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e64:	461f      	mov	r7, r3
 8005e66:	f1ca 0300 	rsb	r3, sl, #0
 8005e6a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005ff0 <__ieee754_atan2+0x198>
 8005e6e:	ea43 030a 	orr.w	r3, r3, sl
 8005e72:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005e76:	4573      	cmp	r3, lr
 8005e78:	4604      	mov	r4, r0
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	d808      	bhi.n	8005e90 <__ieee754_atan2+0x38>
 8005e7e:	4246      	negs	r6, r0
 8005e80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e84:	4306      	orrs	r6, r0
 8005e86:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8005e8a:	4576      	cmp	r6, lr
 8005e8c:	468c      	mov	ip, r1
 8005e8e:	d908      	bls.n	8005ea2 <__ieee754_atan2+0x4a>
 8005e90:	4652      	mov	r2, sl
 8005e92:	464b      	mov	r3, r9
 8005e94:	4620      	mov	r0, r4
 8005e96:	4629      	mov	r1, r5
 8005e98:	f7fa f960 	bl	800015c <__adddf3>
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	460d      	mov	r5, r1
 8005ea0:	e019      	b.n	8005ed6 <__ieee754_atan2+0x7e>
 8005ea2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8005ea6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005eaa:	ea56 060a 	orrs.w	r6, r6, sl
 8005eae:	d103      	bne.n	8005eb8 <__ieee754_atan2+0x60>
 8005eb0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	f000 ba64 	b.w	8006380 <atan>
 8005eb8:	17be      	asrs	r6, r7, #30
 8005eba:	f006 0602 	and.w	r6, r6, #2
 8005ebe:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005ec2:	ea53 0100 	orrs.w	r1, r3, r0
 8005ec6:	d10a      	bne.n	8005ede <__ieee754_atan2+0x86>
 8005ec8:	2e02      	cmp	r6, #2
 8005eca:	d067      	beq.n	8005f9c <__ieee754_atan2+0x144>
 8005ecc:	2e03      	cmp	r6, #3
 8005ece:	d102      	bne.n	8005ed6 <__ieee754_atan2+0x7e>
 8005ed0:	a53b      	add	r5, pc, #236	; (adr r5, 8005fc0 <__ieee754_atan2+0x168>)
 8005ed2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	4629      	mov	r1, r5
 8005eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ede:	ea52 010a 	orrs.w	r1, r2, sl
 8005ee2:	d106      	bne.n	8005ef2 <__ieee754_atan2+0x9a>
 8005ee4:	f1bc 0f00 	cmp.w	ip, #0
 8005ee8:	da63      	bge.n	8005fb2 <__ieee754_atan2+0x15a>
 8005eea:	a537      	add	r5, pc, #220	; (adr r5, 8005fc8 <__ieee754_atan2+0x170>)
 8005eec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ef0:	e7f1      	b.n	8005ed6 <__ieee754_atan2+0x7e>
 8005ef2:	4572      	cmp	r2, lr
 8005ef4:	d10f      	bne.n	8005f16 <__ieee754_atan2+0xbe>
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f106 36ff 	add.w	r6, r6, #4294967295
 8005efc:	d107      	bne.n	8005f0e <__ieee754_atan2+0xb6>
 8005efe:	2e02      	cmp	r6, #2
 8005f00:	d850      	bhi.n	8005fa4 <__ieee754_atan2+0x14c>
 8005f02:	4b3c      	ldr	r3, [pc, #240]	; (8005ff4 <__ieee754_atan2+0x19c>)
 8005f04:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005f08:	e9d6 4500 	ldrd	r4, r5, [r6]
 8005f0c:	e7e3      	b.n	8005ed6 <__ieee754_atan2+0x7e>
 8005f0e:	2e02      	cmp	r6, #2
 8005f10:	d84c      	bhi.n	8005fac <__ieee754_atan2+0x154>
 8005f12:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <__ieee754_atan2+0x1a0>)
 8005f14:	e7f6      	b.n	8005f04 <__ieee754_atan2+0xac>
 8005f16:	4573      	cmp	r3, lr
 8005f18:	d0e4      	beq.n	8005ee4 <__ieee754_atan2+0x8c>
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005f20:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005f24:	da20      	bge.n	8005f68 <__ieee754_atan2+0x110>
 8005f26:	2f00      	cmp	r7, #0
 8005f28:	da01      	bge.n	8005f2e <__ieee754_atan2+0xd6>
 8005f2a:	323c      	adds	r2, #60	; 0x3c
 8005f2c:	db20      	blt.n	8005f70 <__ieee754_atan2+0x118>
 8005f2e:	4652      	mov	r2, sl
 8005f30:	464b      	mov	r3, r9
 8005f32:	4620      	mov	r0, r4
 8005f34:	4629      	mov	r1, r5
 8005f36:	f7fa fbf1 	bl	800071c <__aeabi_ddiv>
 8005f3a:	f000 fbab 	bl	8006694 <fabs>
 8005f3e:	f000 fa1f 	bl	8006380 <atan>
 8005f42:	4604      	mov	r4, r0
 8005f44:	460d      	mov	r5, r1
 8005f46:	2e01      	cmp	r6, #1
 8005f48:	d015      	beq.n	8005f76 <__ieee754_atan2+0x11e>
 8005f4a:	2e02      	cmp	r6, #2
 8005f4c:	d017      	beq.n	8005f7e <__ieee754_atan2+0x126>
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	d0c1      	beq.n	8005ed6 <__ieee754_atan2+0x7e>
 8005f52:	a31f      	add	r3, pc, #124	; (adr r3, 8005fd0 <__ieee754_atan2+0x178>)
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f7fa f8fc 	bl	8000158 <__aeabi_dsub>
 8005f60:	a31d      	add	r3, pc, #116	; (adr r3, 8005fd8 <__ieee754_atan2+0x180>)
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	e016      	b.n	8005f96 <__ieee754_atan2+0x13e>
 8005f68:	a51d      	add	r5, pc, #116	; (adr r5, 8005fe0 <__ieee754_atan2+0x188>)
 8005f6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005f6e:	e7ea      	b.n	8005f46 <__ieee754_atan2+0xee>
 8005f70:	2400      	movs	r4, #0
 8005f72:	2500      	movs	r5, #0
 8005f74:	e7e7      	b.n	8005f46 <__ieee754_atan2+0xee>
 8005f76:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	e7ab      	b.n	8005ed6 <__ieee754_atan2+0x7e>
 8005f7e:	a314      	add	r3, pc, #80	; (adr r3, 8005fd0 <__ieee754_atan2+0x178>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	4620      	mov	r0, r4
 8005f86:	4629      	mov	r1, r5
 8005f88:	f7fa f8e6 	bl	8000158 <__aeabi_dsub>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	a111      	add	r1, pc, #68	; (adr r1, 8005fd8 <__ieee754_atan2+0x180>)
 8005f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f96:	f7fa f8df 	bl	8000158 <__aeabi_dsub>
 8005f9a:	e77f      	b.n	8005e9c <__ieee754_atan2+0x44>
 8005f9c:	a50e      	add	r5, pc, #56	; (adr r5, 8005fd8 <__ieee754_atan2+0x180>)
 8005f9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005fa2:	e798      	b.n	8005ed6 <__ieee754_atan2+0x7e>
 8005fa4:	a510      	add	r5, pc, #64	; (adr r5, 8005fe8 <__ieee754_atan2+0x190>)
 8005fa6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005faa:	e794      	b.n	8005ed6 <__ieee754_atan2+0x7e>
 8005fac:	2400      	movs	r4, #0
 8005fae:	2500      	movs	r5, #0
 8005fb0:	e791      	b.n	8005ed6 <__ieee754_atan2+0x7e>
 8005fb2:	a50b      	add	r5, pc, #44	; (adr r5, 8005fe0 <__ieee754_atan2+0x188>)
 8005fb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005fb8:	e78d      	b.n	8005ed6 <__ieee754_atan2+0x7e>
 8005fba:	bf00      	nop
 8005fbc:	f3af 8000 	nop.w
 8005fc0:	54442d18 	.word	0x54442d18
 8005fc4:	c00921fb 	.word	0xc00921fb
 8005fc8:	54442d18 	.word	0x54442d18
 8005fcc:	bff921fb 	.word	0xbff921fb
 8005fd0:	33145c07 	.word	0x33145c07
 8005fd4:	3ca1a626 	.word	0x3ca1a626
 8005fd8:	54442d18 	.word	0x54442d18
 8005fdc:	400921fb 	.word	0x400921fb
 8005fe0:	54442d18 	.word	0x54442d18
 8005fe4:	3ff921fb 	.word	0x3ff921fb
 8005fe8:	54442d18 	.word	0x54442d18
 8005fec:	3fe921fb 	.word	0x3fe921fb
 8005ff0:	7ff00000 	.word	0x7ff00000
 8005ff4:	08006788 	.word	0x08006788
 8005ff8:	080067a0 	.word	0x080067a0

08005ffc <__ieee754_fmod>:
 8005ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006000:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8006004:	460e      	mov	r6, r1
 8006006:	461d      	mov	r5, r3
 8006008:	4619      	mov	r1, r3
 800600a:	ea58 0302 	orrs.w	r3, r8, r2
 800600e:	4607      	mov	r7, r0
 8006010:	4614      	mov	r4, r2
 8006012:	4694      	mov	ip, r2
 8006014:	4696      	mov	lr, r2
 8006016:	d00c      	beq.n	8006032 <__ieee754_fmod+0x36>
 8006018:	4a7a      	ldr	r2, [pc, #488]	; (8006204 <__ieee754_fmod+0x208>)
 800601a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800601e:	4293      	cmp	r3, r2
 8006020:	46b2      	mov	sl, r6
 8006022:	dc06      	bgt.n	8006032 <__ieee754_fmod+0x36>
 8006024:	4262      	negs	r2, r4
 8006026:	4878      	ldr	r0, [pc, #480]	; (8006208 <__ieee754_fmod+0x20c>)
 8006028:	4322      	orrs	r2, r4
 800602a:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800602e:	4282      	cmp	r2, r0
 8006030:	d90c      	bls.n	800604c <__ieee754_fmod+0x50>
 8006032:	460b      	mov	r3, r1
 8006034:	4622      	mov	r2, r4
 8006036:	4638      	mov	r0, r7
 8006038:	4631      	mov	r1, r6
 800603a:	f7fa fa45 	bl	80004c8 <__aeabi_dmul>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	f7fa fb6b 	bl	800071c <__aeabi_ddiv>
 8006046:	4607      	mov	r7, r0
 8006048:	460e      	mov	r6, r1
 800604a:	e00e      	b.n	800606a <__ieee754_fmod+0x6e>
 800604c:	4543      	cmp	r3, r8
 800604e:	46b9      	mov	r9, r7
 8006050:	4639      	mov	r1, r7
 8006052:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 8006056:	dc0c      	bgt.n	8006072 <__ieee754_fmod+0x76>
 8006058:	db07      	blt.n	800606a <__ieee754_fmod+0x6e>
 800605a:	4567      	cmp	r7, ip
 800605c:	d305      	bcc.n	800606a <__ieee754_fmod+0x6e>
 800605e:	d108      	bne.n	8006072 <__ieee754_fmod+0x76>
 8006060:	4b6a      	ldr	r3, [pc, #424]	; (800620c <__ieee754_fmod+0x210>)
 8006062:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 8006066:	e9d4 7600 	ldrd	r7, r6, [r4]
 800606a:	4638      	mov	r0, r7
 800606c:	4631      	mov	r1, r6
 800606e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006072:	ea1a 0f00 	tst.w	sl, r0
 8006076:	d14a      	bne.n	800610e <__ieee754_fmod+0x112>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d141      	bne.n	8006100 <__ieee754_fmod+0x104>
 800607c:	464a      	mov	r2, r9
 800607e:	4864      	ldr	r0, [pc, #400]	; (8006210 <__ieee754_fmod+0x214>)
 8006080:	2a00      	cmp	r2, #0
 8006082:	dc3a      	bgt.n	80060fa <__ieee754_fmod+0xfe>
 8006084:	4a60      	ldr	r2, [pc, #384]	; (8006208 <__ieee754_fmod+0x20c>)
 8006086:	402a      	ands	r2, r5
 8006088:	2a00      	cmp	r2, #0
 800608a:	d14f      	bne.n	800612c <__ieee754_fmod+0x130>
 800608c:	f1b8 0f00 	cmp.w	r8, #0
 8006090:	d144      	bne.n	800611c <__ieee754_fmod+0x120>
 8006092:	4666      	mov	r6, ip
 8006094:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006098:	2e00      	cmp	r6, #0
 800609a:	dc3c      	bgt.n	8006116 <__ieee754_fmod+0x11a>
 800609c:	4e5d      	ldr	r6, [pc, #372]	; (8006214 <__ieee754_fmod+0x218>)
 800609e:	42b0      	cmp	r0, r6
 80060a0:	db49      	blt.n	8006136 <__ieee754_fmod+0x13a>
 80060a2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80060a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060aa:	4e5a      	ldr	r6, [pc, #360]	; (8006214 <__ieee754_fmod+0x218>)
 80060ac:	42b2      	cmp	r2, r6
 80060ae:	db54      	blt.n	800615a <__ieee754_fmod+0x15e>
 80060b0:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80060b4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80060b8:	1a80      	subs	r0, r0, r2
 80060ba:	1b5e      	subs	r6, r3, r5
 80060bc:	eba1 070e 	sub.w	r7, r1, lr
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d161      	bne.n	8006188 <__ieee754_fmod+0x18c>
 80060c4:	4571      	cmp	r1, lr
 80060c6:	bf38      	it	cc
 80060c8:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80060cc:	2e00      	cmp	r6, #0
 80060ce:	bfa4      	itt	ge
 80060d0:	4639      	movge	r1, r7
 80060d2:	4633      	movge	r3, r6
 80060d4:	ea53 0001 	orrs.w	r0, r3, r1
 80060d8:	d0c2      	beq.n	8006060 <__ieee754_fmod+0x64>
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060de:	db68      	blt.n	80061b2 <__ieee754_fmod+0x1b6>
 80060e0:	484c      	ldr	r0, [pc, #304]	; (8006214 <__ieee754_fmod+0x218>)
 80060e2:	4282      	cmp	r2, r0
 80060e4:	db6b      	blt.n	80061be <__ieee754_fmod+0x1c2>
 80060e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80060ea:	431c      	orrs	r4, r3
 80060ec:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80060f0:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 80060f4:	460f      	mov	r7, r1
 80060f6:	464e      	mov	r6, r9
 80060f8:	e7b7      	b.n	800606a <__ieee754_fmod+0x6e>
 80060fa:	3801      	subs	r0, #1
 80060fc:	0052      	lsls	r2, r2, #1
 80060fe:	e7bf      	b.n	8006080 <__ieee754_fmod+0x84>
 8006100:	4844      	ldr	r0, [pc, #272]	; (8006214 <__ieee754_fmod+0x218>)
 8006102:	02da      	lsls	r2, r3, #11
 8006104:	2a00      	cmp	r2, #0
 8006106:	ddbd      	ble.n	8006084 <__ieee754_fmod+0x88>
 8006108:	3801      	subs	r0, #1
 800610a:	0052      	lsls	r2, r2, #1
 800610c:	e7fa      	b.n	8006104 <__ieee754_fmod+0x108>
 800610e:	1518      	asrs	r0, r3, #20
 8006110:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8006114:	e7b6      	b.n	8006084 <__ieee754_fmod+0x88>
 8006116:	3a01      	subs	r2, #1
 8006118:	0076      	lsls	r6, r6, #1
 800611a:	e7bd      	b.n	8006098 <__ieee754_fmod+0x9c>
 800611c:	4a3d      	ldr	r2, [pc, #244]	; (8006214 <__ieee754_fmod+0x218>)
 800611e:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 8006122:	2e00      	cmp	r6, #0
 8006124:	ddba      	ble.n	800609c <__ieee754_fmod+0xa0>
 8006126:	3a01      	subs	r2, #1
 8006128:	0076      	lsls	r6, r6, #1
 800612a:	e7fa      	b.n	8006122 <__ieee754_fmod+0x126>
 800612c:	ea4f 5228 	mov.w	r2, r8, asr #20
 8006130:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006134:	e7b2      	b.n	800609c <__ieee754_fmod+0xa0>
 8006136:	1a31      	subs	r1, r6, r0
 8006138:	291f      	cmp	r1, #31
 800613a:	dc08      	bgt.n	800614e <__ieee754_fmod+0x152>
 800613c:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 8006140:	408b      	lsls	r3, r1
 8006142:	fa29 f606 	lsr.w	r6, r9, r6
 8006146:	4333      	orrs	r3, r6
 8006148:	fa09 f101 	lsl.w	r1, r9, r1
 800614c:	e7ad      	b.n	80060aa <__ieee754_fmod+0xae>
 800614e:	4b32      	ldr	r3, [pc, #200]	; (8006218 <__ieee754_fmod+0x21c>)
 8006150:	2100      	movs	r1, #0
 8006152:	1a1b      	subs	r3, r3, r0
 8006154:	fa09 f303 	lsl.w	r3, r9, r3
 8006158:	e7a7      	b.n	80060aa <__ieee754_fmod+0xae>
 800615a:	eba6 0e02 	sub.w	lr, r6, r2
 800615e:	f1be 0f1f 	cmp.w	lr, #31
 8006162:	dc0a      	bgt.n	800617a <__ieee754_fmod+0x17e>
 8006164:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8006168:	fa08 f80e 	lsl.w	r8, r8, lr
 800616c:	fa2c f505 	lsr.w	r5, ip, r5
 8006170:	ea45 0508 	orr.w	r5, r5, r8
 8006174:	fa0c fe0e 	lsl.w	lr, ip, lr
 8006178:	e79e      	b.n	80060b8 <__ieee754_fmod+0xbc>
 800617a:	4d27      	ldr	r5, [pc, #156]	; (8006218 <__ieee754_fmod+0x21c>)
 800617c:	f04f 0e00 	mov.w	lr, #0
 8006180:	1aad      	subs	r5, r5, r2
 8006182:	fa0c f505 	lsl.w	r5, ip, r5
 8006186:	e797      	b.n	80060b8 <__ieee754_fmod+0xbc>
 8006188:	4571      	cmp	r1, lr
 800618a:	bf38      	it	cc
 800618c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8006190:	2e00      	cmp	r6, #0
 8006192:	da05      	bge.n	80061a0 <__ieee754_fmod+0x1a4>
 8006194:	0fce      	lsrs	r6, r1, #31
 8006196:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800619a:	0049      	lsls	r1, r1, #1
 800619c:	3801      	subs	r0, #1
 800619e:	e78c      	b.n	80060ba <__ieee754_fmod+0xbe>
 80061a0:	ea56 0307 	orrs.w	r3, r6, r7
 80061a4:	f43f af5c 	beq.w	8006060 <__ieee754_fmod+0x64>
 80061a8:	0ffb      	lsrs	r3, r7, #31
 80061aa:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80061ae:	0079      	lsls	r1, r7, #1
 80061b0:	e7f4      	b.n	800619c <__ieee754_fmod+0x1a0>
 80061b2:	0fc8      	lsrs	r0, r1, #31
 80061b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80061b8:	0049      	lsls	r1, r1, #1
 80061ba:	3a01      	subs	r2, #1
 80061bc:	e78d      	b.n	80060da <__ieee754_fmod+0xde>
 80061be:	1a80      	subs	r0, r0, r2
 80061c0:	2814      	cmp	r0, #20
 80061c2:	dc0a      	bgt.n	80061da <__ieee754_fmod+0x1de>
 80061c4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80061c8:	fa03 f202 	lsl.w	r2, r3, r2
 80061cc:	40c1      	lsrs	r1, r0
 80061ce:	430a      	orrs	r2, r1
 80061d0:	4103      	asrs	r3, r0
 80061d2:	4610      	mov	r0, r2
 80061d4:	ea43 0104 	orr.w	r1, r3, r4
 80061d8:	e735      	b.n	8006046 <__ieee754_fmod+0x4a>
 80061da:	281f      	cmp	r0, #31
 80061dc:	dc07      	bgt.n	80061ee <__ieee754_fmod+0x1f2>
 80061de:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80061e2:	40c1      	lsrs	r1, r0
 80061e4:	fa03 f202 	lsl.w	r2, r3, r2
 80061e8:	430a      	orrs	r2, r1
 80061ea:	4623      	mov	r3, r4
 80061ec:	e7f1      	b.n	80061d2 <__ieee754_fmod+0x1d6>
 80061ee:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80061f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80061f6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80061fa:	32e2      	adds	r2, #226	; 0xe2
 80061fc:	fa43 f202 	asr.w	r2, r3, r2
 8006200:	e7f3      	b.n	80061ea <__ieee754_fmod+0x1ee>
 8006202:	bf00      	nop
 8006204:	7fefffff 	.word	0x7fefffff
 8006208:	7ff00000 	.word	0x7ff00000
 800620c:	080067b8 	.word	0x080067b8
 8006210:	fffffbed 	.word	0xfffffbed
 8006214:	fffffc02 	.word	0xfffffc02
 8006218:	fffffbe2 	.word	0xfffffbe2

0800621c <__ieee754_sqrt>:
 800621c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006378 <__ieee754_sqrt+0x15c>
 8006220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006224:	ea3c 0c01 	bics.w	ip, ip, r1
 8006228:	4606      	mov	r6, r0
 800622a:	460d      	mov	r5, r1
 800622c:	460c      	mov	r4, r1
 800622e:	460a      	mov	r2, r1
 8006230:	4607      	mov	r7, r0
 8006232:	4603      	mov	r3, r0
 8006234:	d10f      	bne.n	8006256 <__ieee754_sqrt+0x3a>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	f7fa f945 	bl	80004c8 <__aeabi_dmul>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4630      	mov	r0, r6
 8006244:	4629      	mov	r1, r5
 8006246:	f7f9 ff89 	bl	800015c <__adddf3>
 800624a:	4606      	mov	r6, r0
 800624c:	460d      	mov	r5, r1
 800624e:	4630      	mov	r0, r6
 8006250:	4629      	mov	r1, r5
 8006252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006256:	2900      	cmp	r1, #0
 8006258:	dc0e      	bgt.n	8006278 <__ieee754_sqrt+0x5c>
 800625a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800625e:	ea5c 0707 	orrs.w	r7, ip, r7
 8006262:	d0f4      	beq.n	800624e <__ieee754_sqrt+0x32>
 8006264:	b141      	cbz	r1, 8006278 <__ieee754_sqrt+0x5c>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	f7f9 ff75 	bl	8000158 <__aeabi_dsub>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	f7fa fa53 	bl	800071c <__aeabi_ddiv>
 8006276:	e7e8      	b.n	800624a <__ieee754_sqrt+0x2e>
 8006278:	1521      	asrs	r1, r4, #20
 800627a:	d075      	beq.n	8006368 <__ieee754_sqrt+0x14c>
 800627c:	07cc      	lsls	r4, r1, #31
 800627e:	f04f 0400 	mov.w	r4, #0
 8006282:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006286:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800628a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800628e:	bf5e      	ittt	pl
 8006290:	0fd9      	lsrpl	r1, r3, #31
 8006292:	005b      	lslpl	r3, r3, #1
 8006294:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006298:	0fd9      	lsrs	r1, r3, #31
 800629a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800629e:	2516      	movs	r5, #22
 80062a0:	4620      	mov	r0, r4
 80062a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062a6:	107f      	asrs	r7, r7, #1
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	1846      	adds	r6, r0, r1
 80062ac:	4296      	cmp	r6, r2
 80062ae:	bfde      	ittt	le
 80062b0:	1b92      	suble	r2, r2, r6
 80062b2:	1870      	addle	r0, r6, r1
 80062b4:	1864      	addle	r4, r4, r1
 80062b6:	0052      	lsls	r2, r2, #1
 80062b8:	3d01      	subs	r5, #1
 80062ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80062be:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80062c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80062c6:	d1f0      	bne.n	80062aa <__ieee754_sqrt+0x8e>
 80062c8:	4629      	mov	r1, r5
 80062ca:	f04f 0e20 	mov.w	lr, #32
 80062ce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80062d2:	4282      	cmp	r2, r0
 80062d4:	eb06 0c05 	add.w	ip, r6, r5
 80062d8:	dc02      	bgt.n	80062e0 <__ieee754_sqrt+0xc4>
 80062da:	d113      	bne.n	8006304 <__ieee754_sqrt+0xe8>
 80062dc:	459c      	cmp	ip, r3
 80062de:	d811      	bhi.n	8006304 <__ieee754_sqrt+0xe8>
 80062e0:	f1bc 0f00 	cmp.w	ip, #0
 80062e4:	eb0c 0506 	add.w	r5, ip, r6
 80062e8:	da43      	bge.n	8006372 <__ieee754_sqrt+0x156>
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	db41      	blt.n	8006372 <__ieee754_sqrt+0x156>
 80062ee:	f100 0801 	add.w	r8, r0, #1
 80062f2:	1a12      	subs	r2, r2, r0
 80062f4:	4640      	mov	r0, r8
 80062f6:	459c      	cmp	ip, r3
 80062f8:	bf88      	it	hi
 80062fa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80062fe:	eba3 030c 	sub.w	r3, r3, ip
 8006302:	4431      	add	r1, r6
 8006304:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006308:	f1be 0e01 	subs.w	lr, lr, #1
 800630c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006310:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006314:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006318:	d1db      	bne.n	80062d2 <__ieee754_sqrt+0xb6>
 800631a:	4313      	orrs	r3, r2
 800631c:	d006      	beq.n	800632c <__ieee754_sqrt+0x110>
 800631e:	1c48      	adds	r0, r1, #1
 8006320:	bf0b      	itete	eq
 8006322:	4671      	moveq	r1, lr
 8006324:	3101      	addne	r1, #1
 8006326:	3401      	addeq	r4, #1
 8006328:	f021 0101 	bicne.w	r1, r1, #1
 800632c:	1063      	asrs	r3, r4, #1
 800632e:	0849      	lsrs	r1, r1, #1
 8006330:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006334:	07e2      	lsls	r2, r4, #31
 8006336:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800633a:	bf48      	it	mi
 800633c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006340:	460e      	mov	r6, r1
 8006342:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006346:	e782      	b.n	800624e <__ieee754_sqrt+0x32>
 8006348:	0ada      	lsrs	r2, r3, #11
 800634a:	3815      	subs	r0, #21
 800634c:	055b      	lsls	r3, r3, #21
 800634e:	2a00      	cmp	r2, #0
 8006350:	d0fa      	beq.n	8006348 <__ieee754_sqrt+0x12c>
 8006352:	02d5      	lsls	r5, r2, #11
 8006354:	d50a      	bpl.n	800636c <__ieee754_sqrt+0x150>
 8006356:	f1c1 0420 	rsb	r4, r1, #32
 800635a:	fa23 f404 	lsr.w	r4, r3, r4
 800635e:	1e4d      	subs	r5, r1, #1
 8006360:	408b      	lsls	r3, r1
 8006362:	4322      	orrs	r2, r4
 8006364:	1b41      	subs	r1, r0, r5
 8006366:	e789      	b.n	800627c <__ieee754_sqrt+0x60>
 8006368:	4608      	mov	r0, r1
 800636a:	e7f0      	b.n	800634e <__ieee754_sqrt+0x132>
 800636c:	0052      	lsls	r2, r2, #1
 800636e:	3101      	adds	r1, #1
 8006370:	e7ef      	b.n	8006352 <__ieee754_sqrt+0x136>
 8006372:	4680      	mov	r8, r0
 8006374:	e7bd      	b.n	80062f2 <__ieee754_sqrt+0xd6>
 8006376:	bf00      	nop
 8006378:	7ff00000 	.word	0x7ff00000
 800637c:	00000000 	.word	0x00000000

08006380 <atan>:
 8006380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	4bb6      	ldr	r3, [pc, #728]	; (8006660 <atan+0x2e0>)
 8006386:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800638a:	429e      	cmp	r6, r3
 800638c:	4604      	mov	r4, r0
 800638e:	460d      	mov	r5, r1
 8006390:	468b      	mov	fp, r1
 8006392:	dd17      	ble.n	80063c4 <atan+0x44>
 8006394:	4bb3      	ldr	r3, [pc, #716]	; (8006664 <atan+0x2e4>)
 8006396:	429e      	cmp	r6, r3
 8006398:	dc01      	bgt.n	800639e <atan+0x1e>
 800639a:	d109      	bne.n	80063b0 <atan+0x30>
 800639c:	b140      	cbz	r0, 80063b0 <atan+0x30>
 800639e:	4622      	mov	r2, r4
 80063a0:	462b      	mov	r3, r5
 80063a2:	4620      	mov	r0, r4
 80063a4:	4629      	mov	r1, r5
 80063a6:	f7f9 fed9 	bl	800015c <__adddf3>
 80063aa:	4604      	mov	r4, r0
 80063ac:	460d      	mov	r5, r1
 80063ae:	e005      	b.n	80063bc <atan+0x3c>
 80063b0:	f1bb 0f00 	cmp.w	fp, #0
 80063b4:	4cac      	ldr	r4, [pc, #688]	; (8006668 <atan+0x2e8>)
 80063b6:	f300 8121 	bgt.w	80065fc <atan+0x27c>
 80063ba:	4dac      	ldr	r5, [pc, #688]	; (800666c <atan+0x2ec>)
 80063bc:	4620      	mov	r0, r4
 80063be:	4629      	mov	r1, r5
 80063c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c4:	4baa      	ldr	r3, [pc, #680]	; (8006670 <atan+0x2f0>)
 80063c6:	429e      	cmp	r6, r3
 80063c8:	dc11      	bgt.n	80063ee <atan+0x6e>
 80063ca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80063ce:	429e      	cmp	r6, r3
 80063d0:	dc0a      	bgt.n	80063e8 <atan+0x68>
 80063d2:	a38b      	add	r3, pc, #556	; (adr r3, 8006600 <atan+0x280>)
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f7f9 fec0 	bl	800015c <__adddf3>
 80063dc:	2200      	movs	r2, #0
 80063de:	4ba5      	ldr	r3, [pc, #660]	; (8006674 <atan+0x2f4>)
 80063e0:	f7fa fb02 	bl	80009e8 <__aeabi_dcmpgt>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d1e9      	bne.n	80063bc <atan+0x3c>
 80063e8:	f04f 3aff 	mov.w	sl, #4294967295
 80063ec:	e027      	b.n	800643e <atan+0xbe>
 80063ee:	f000 f951 	bl	8006694 <fabs>
 80063f2:	4ba1      	ldr	r3, [pc, #644]	; (8006678 <atan+0x2f8>)
 80063f4:	4604      	mov	r4, r0
 80063f6:	429e      	cmp	r6, r3
 80063f8:	460d      	mov	r5, r1
 80063fa:	f300 80b8 	bgt.w	800656e <atan+0x1ee>
 80063fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006402:	429e      	cmp	r6, r3
 8006404:	f300 809c 	bgt.w	8006540 <atan+0x1c0>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	f7f9 fea6 	bl	800015c <__adddf3>
 8006410:	2200      	movs	r2, #0
 8006412:	4b98      	ldr	r3, [pc, #608]	; (8006674 <atan+0x2f4>)
 8006414:	f7f9 fea0 	bl	8000158 <__aeabi_dsub>
 8006418:	2200      	movs	r2, #0
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006422:	4620      	mov	r0, r4
 8006424:	4629      	mov	r1, r5
 8006426:	f7f9 fe99 	bl	800015c <__adddf3>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4630      	mov	r0, r6
 8006430:	4639      	mov	r1, r7
 8006432:	f7fa f973 	bl	800071c <__aeabi_ddiv>
 8006436:	f04f 0a00 	mov.w	sl, #0
 800643a:	4604      	mov	r4, r0
 800643c:	460d      	mov	r5, r1
 800643e:	4622      	mov	r2, r4
 8006440:	462b      	mov	r3, r5
 8006442:	4620      	mov	r0, r4
 8006444:	4629      	mov	r1, r5
 8006446:	f7fa f83f 	bl	80004c8 <__aeabi_dmul>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4680      	mov	r8, r0
 8006450:	4689      	mov	r9, r1
 8006452:	f7fa f839 	bl	80004c8 <__aeabi_dmul>
 8006456:	a36c      	add	r3, pc, #432	; (adr r3, 8006608 <atan+0x288>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	4606      	mov	r6, r0
 800645e:	460f      	mov	r7, r1
 8006460:	f7fa f832 	bl	80004c8 <__aeabi_dmul>
 8006464:	a36a      	add	r3, pc, #424	; (adr r3, 8006610 <atan+0x290>)
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f7f9 fe77 	bl	800015c <__adddf3>
 800646e:	4632      	mov	r2, r6
 8006470:	463b      	mov	r3, r7
 8006472:	f7fa f829 	bl	80004c8 <__aeabi_dmul>
 8006476:	a368      	add	r3, pc, #416	; (adr r3, 8006618 <atan+0x298>)
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f7f9 fe6e 	bl	800015c <__adddf3>
 8006480:	4632      	mov	r2, r6
 8006482:	463b      	mov	r3, r7
 8006484:	f7fa f820 	bl	80004c8 <__aeabi_dmul>
 8006488:	a365      	add	r3, pc, #404	; (adr r3, 8006620 <atan+0x2a0>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f7f9 fe65 	bl	800015c <__adddf3>
 8006492:	4632      	mov	r2, r6
 8006494:	463b      	mov	r3, r7
 8006496:	f7fa f817 	bl	80004c8 <__aeabi_dmul>
 800649a:	a363      	add	r3, pc, #396	; (adr r3, 8006628 <atan+0x2a8>)
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f7f9 fe5c 	bl	800015c <__adddf3>
 80064a4:	4632      	mov	r2, r6
 80064a6:	463b      	mov	r3, r7
 80064a8:	f7fa f80e 	bl	80004c8 <__aeabi_dmul>
 80064ac:	a360      	add	r3, pc, #384	; (adr r3, 8006630 <atan+0x2b0>)
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f7f9 fe53 	bl	800015c <__adddf3>
 80064b6:	4642      	mov	r2, r8
 80064b8:	464b      	mov	r3, r9
 80064ba:	f7fa f805 	bl	80004c8 <__aeabi_dmul>
 80064be:	a35e      	add	r3, pc, #376	; (adr r3, 8006638 <atan+0x2b8>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	4680      	mov	r8, r0
 80064c6:	4689      	mov	r9, r1
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7f9 fffc 	bl	80004c8 <__aeabi_dmul>
 80064d0:	a35b      	add	r3, pc, #364	; (adr r3, 8006640 <atan+0x2c0>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7f9 fe3f 	bl	8000158 <__aeabi_dsub>
 80064da:	4632      	mov	r2, r6
 80064dc:	463b      	mov	r3, r7
 80064de:	f7f9 fff3 	bl	80004c8 <__aeabi_dmul>
 80064e2:	a359      	add	r3, pc, #356	; (adr r3, 8006648 <atan+0x2c8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7f9 fe36 	bl	8000158 <__aeabi_dsub>
 80064ec:	4632      	mov	r2, r6
 80064ee:	463b      	mov	r3, r7
 80064f0:	f7f9 ffea 	bl	80004c8 <__aeabi_dmul>
 80064f4:	a356      	add	r3, pc, #344	; (adr r3, 8006650 <atan+0x2d0>)
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	f7f9 fe2d 	bl	8000158 <__aeabi_dsub>
 80064fe:	4632      	mov	r2, r6
 8006500:	463b      	mov	r3, r7
 8006502:	f7f9 ffe1 	bl	80004c8 <__aeabi_dmul>
 8006506:	a354      	add	r3, pc, #336	; (adr r3, 8006658 <atan+0x2d8>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7f9 fe24 	bl	8000158 <__aeabi_dsub>
 8006510:	4632      	mov	r2, r6
 8006512:	463b      	mov	r3, r7
 8006514:	f7f9 ffd8 	bl	80004c8 <__aeabi_dmul>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4640      	mov	r0, r8
 800651e:	4649      	mov	r1, r9
 8006520:	f7f9 fe1c 	bl	800015c <__adddf3>
 8006524:	4622      	mov	r2, r4
 8006526:	462b      	mov	r3, r5
 8006528:	f7f9 ffce 	bl	80004c8 <__aeabi_dmul>
 800652c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	d144      	bne.n	80065c0 <atan+0x240>
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7f9 fe0d 	bl	8000158 <__aeabi_dsub>
 800653e:	e734      	b.n	80063aa <atan+0x2a>
 8006540:	2200      	movs	r2, #0
 8006542:	4b4c      	ldr	r3, [pc, #304]	; (8006674 <atan+0x2f4>)
 8006544:	f7f9 fe08 	bl	8000158 <__aeabi_dsub>
 8006548:	2200      	movs	r2, #0
 800654a:	4606      	mov	r6, r0
 800654c:	460f      	mov	r7, r1
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	4b48      	ldr	r3, [pc, #288]	; (8006674 <atan+0x2f4>)
 8006554:	f7f9 fe02 	bl	800015c <__adddf3>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4630      	mov	r0, r6
 800655e:	4639      	mov	r1, r7
 8006560:	f7fa f8dc 	bl	800071c <__aeabi_ddiv>
 8006564:	f04f 0a01 	mov.w	sl, #1
 8006568:	4604      	mov	r4, r0
 800656a:	460d      	mov	r5, r1
 800656c:	e767      	b.n	800643e <atan+0xbe>
 800656e:	4b43      	ldr	r3, [pc, #268]	; (800667c <atan+0x2fc>)
 8006570:	429e      	cmp	r6, r3
 8006572:	da1a      	bge.n	80065aa <atan+0x22a>
 8006574:	2200      	movs	r2, #0
 8006576:	4b42      	ldr	r3, [pc, #264]	; (8006680 <atan+0x300>)
 8006578:	f7f9 fdee 	bl	8000158 <__aeabi_dsub>
 800657c:	2200      	movs	r2, #0
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	4620      	mov	r0, r4
 8006584:	4629      	mov	r1, r5
 8006586:	4b3e      	ldr	r3, [pc, #248]	; (8006680 <atan+0x300>)
 8006588:	f7f9 ff9e 	bl	80004c8 <__aeabi_dmul>
 800658c:	2200      	movs	r2, #0
 800658e:	4b39      	ldr	r3, [pc, #228]	; (8006674 <atan+0x2f4>)
 8006590:	f7f9 fde4 	bl	800015c <__adddf3>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7fa f8be 	bl	800071c <__aeabi_ddiv>
 80065a0:	f04f 0a02 	mov.w	sl, #2
 80065a4:	4604      	mov	r4, r0
 80065a6:	460d      	mov	r5, r1
 80065a8:	e749      	b.n	800643e <atan+0xbe>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	2000      	movs	r0, #0
 80065b0:	4934      	ldr	r1, [pc, #208]	; (8006684 <atan+0x304>)
 80065b2:	f7fa f8b3 	bl	800071c <__aeabi_ddiv>
 80065b6:	f04f 0a03 	mov.w	sl, #3
 80065ba:	4604      	mov	r4, r0
 80065bc:	460d      	mov	r5, r1
 80065be:	e73e      	b.n	800643e <atan+0xbe>
 80065c0:	4b31      	ldr	r3, [pc, #196]	; (8006688 <atan+0x308>)
 80065c2:	4e32      	ldr	r6, [pc, #200]	; (800668c <atan+0x30c>)
 80065c4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80065c8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80065cc:	e9da 2300 	ldrd	r2, r3, [sl]
 80065d0:	f7f9 fdc2 	bl	8000158 <__aeabi_dsub>
 80065d4:	4622      	mov	r2, r4
 80065d6:	462b      	mov	r3, r5
 80065d8:	f7f9 fdbe 	bl	8000158 <__aeabi_dsub>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80065e4:	f7f9 fdb8 	bl	8000158 <__aeabi_dsub>
 80065e8:	f1bb 0f00 	cmp.w	fp, #0
 80065ec:	4604      	mov	r4, r0
 80065ee:	460d      	mov	r5, r1
 80065f0:	f6bf aee4 	bge.w	80063bc <atan+0x3c>
 80065f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065f8:	461d      	mov	r5, r3
 80065fa:	e6df      	b.n	80063bc <atan+0x3c>
 80065fc:	4d24      	ldr	r5, [pc, #144]	; (8006690 <atan+0x310>)
 80065fe:	e6dd      	b.n	80063bc <atan+0x3c>
 8006600:	8800759c 	.word	0x8800759c
 8006604:	7e37e43c 	.word	0x7e37e43c
 8006608:	e322da11 	.word	0xe322da11
 800660c:	3f90ad3a 	.word	0x3f90ad3a
 8006610:	24760deb 	.word	0x24760deb
 8006614:	3fa97b4b 	.word	0x3fa97b4b
 8006618:	a0d03d51 	.word	0xa0d03d51
 800661c:	3fb10d66 	.word	0x3fb10d66
 8006620:	c54c206e 	.word	0xc54c206e
 8006624:	3fb745cd 	.word	0x3fb745cd
 8006628:	920083ff 	.word	0x920083ff
 800662c:	3fc24924 	.word	0x3fc24924
 8006630:	5555550d 	.word	0x5555550d
 8006634:	3fd55555 	.word	0x3fd55555
 8006638:	2c6a6c2f 	.word	0x2c6a6c2f
 800663c:	bfa2b444 	.word	0xbfa2b444
 8006640:	52defd9a 	.word	0x52defd9a
 8006644:	3fadde2d 	.word	0x3fadde2d
 8006648:	af749a6d 	.word	0xaf749a6d
 800664c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006650:	fe231671 	.word	0xfe231671
 8006654:	3fbc71c6 	.word	0x3fbc71c6
 8006658:	9998ebc4 	.word	0x9998ebc4
 800665c:	3fc99999 	.word	0x3fc99999
 8006660:	440fffff 	.word	0x440fffff
 8006664:	7ff00000 	.word	0x7ff00000
 8006668:	54442d18 	.word	0x54442d18
 800666c:	bff921fb 	.word	0xbff921fb
 8006670:	3fdbffff 	.word	0x3fdbffff
 8006674:	3ff00000 	.word	0x3ff00000
 8006678:	3ff2ffff 	.word	0x3ff2ffff
 800667c:	40038000 	.word	0x40038000
 8006680:	3ff80000 	.word	0x3ff80000
 8006684:	bff00000 	.word	0xbff00000
 8006688:	080067e8 	.word	0x080067e8
 800668c:	080067c8 	.word	0x080067c8
 8006690:	3ff921fb 	.word	0x3ff921fb

08006694 <fabs>:
 8006694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006698:	4770      	bx	lr
	...

0800669c <_init>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr

080066a8 <_fini>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr
